{"/home/travis/build/npmtest/node-npmtest-eventstore/test.js":"/* istanbul instrument in package npmtest_eventstore */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eventstore/lib.npmtest_eventstore.js":"/* istanbul instrument in package npmtest_eventstore */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_eventstore = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_eventstore = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-eventstore/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-eventstore && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_eventstore */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_eventstore\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_eventstore.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_eventstore.rollup.js'] =\n            local.assetsDict['/assets.npmtest_eventstore.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_eventstore.__dirname + '/lib.npmtest_eventstore.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eventstore/node_modules/eventstore/index.js":"'use strict';\n\nvar Eventstore = require('./lib/eventstore'),\n  Base = require('./lib/base'),\n  _ = require('lodash'),\n  debug = require('debug')('eventstore');\n\nfunction getSpecificStore(options) {\n  options = options || {};\n\n  options.type = options.type || 'inmemory';\n\n  if (_.isFunction(options.type)) {\n    return options.type;\n  }\n\n  options.type = options.type.toLowerCase();\n\n  var dbPath = __dirname + \"/lib/databases/\" + options.type + \".js\";\n\n  var exists = require('fs').existsSync || require('path').existsSync;\n  if (!exists(dbPath)) {\n    var errMsg = 'Implementation for db \"' + options.type + '\" does not exist!';\n    console.log(errMsg);\n    debug(errMsg);\n    throw new Error(errMsg);\n  }\n\n  try {\n    var db = require(dbPath);\n    return db;\n  } catch (err) {\n\n    if (err.message.indexOf('Cannot find module') >= 0 &&\n      err.message.indexOf(\"'\") > 0 &&\n      err.message.lastIndexOf(\"'\") !== err.message.indexOf(\"'\")) {\n\n      var moduleName = err.message.substring(err.message.indexOf(\"'\") + 1, err.message.lastIndexOf(\"'\"));\n      var msg = 'Please install module \"' + moduleName +\n        '\" to work with db implementation \"' + options.type + '\"!';\n      console.log(msg);\n      debug(msg);\n    }\n\n    throw err;\n  }\n}\n\nmodule.exports = function(options) {\n  options = options || {};\n\n  var Store;\n\n  try {\n    Store = getSpecificStore(options);\n  } catch (err) {\n    throw err;\n  }\n\n  return new Eventstore(options, new Store(options));\n};\n\nmodule.exports.Store = Base;\n","/home/travis/build/npmtest/node-npmtest-eventstore/node_modules/eventstore/lib/eventstore.js":"'use strict';\n\nvar debug = require('debug')('eventstore'),\n  util = require('util'),\n  EventEmitter = require('events').EventEmitter,\n  _ = require('lodash'),\n  async = require('async'),\n  tolerate = require('tolerance'),\n  EventDispatcher = require('./eventDispatcher'),\n  EventStream = require('./eventStream'),\n  Snapshot = require('./snapshot');\n\n/**\n * Eventstore constructor\n * @param {Object} options The options.\n * @param {Store}  store   The db implementation.\n * @constructor\n */\nfunction Eventstore(options, store) {\n  this.options = options || {};\n  this.store = store;\n\n  this.eventMappings = {};\n\n  EventEmitter.call(this);\n}\n\nutil.inherits(Eventstore, EventEmitter);\n\n_.extend(Eventstore.prototype, {\n\n  /**\n   * Inject function for event publishing.\n   * @param {Function} fn the function to be injected\n   * @returns {Eventstore}  to be able to chain...\n   */\n  useEventPublisher: function (fn) {\n    if (fn.length === 1) {\n      fn = _.wrap(fn, function(func, evt, callback) {\n        func(evt);\n        callback(null);\n      });\n    }\n\n    this.publisher = fn;\n\n    return this;\n  },\n\n  /**\n   * Define which values should be mapped/copied to the payload event. [optional]\n   * @param {Object} mappings the mappings in dotty notation\n   *                          {\n   *                            id: 'id',\n   *                            commitId: 'commitId',\n   *                            commitSequence: 'commitSequence',\n   *                            commitStamp: 'commitStamp',\n   *                            streamRevision: 'streamRevision'\n   *                          }\n   * @returns {Eventstore}  to be able to chain...\n   */\n  defineEventMappings: function (mappings) {\n    if (!mappings || !_.isObject(mappings)) {\n      var err = new Error('Please pass a valid mapping values!');\n      debug(err);\n      throw err;\n    }\n\n    this.eventMappings = mappings;\n\n    return this;\n  },\n\n  /**\n   * Call this function to initialize the eventstore.\n   * If an event publisher function was injected it will additionally initialize an event dispatcher.\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  init: function (callback) {\n    var self = this;\n\n    function initDispatcher() {\n      debug('init event dispatcher');\n      self.dispatcher = new EventDispatcher(self.publisher, self);\n      self.dispatcher.start(callback);\n    }\n\n    this.store.on('connect', function () {\n      self.emit('connect');\n    });\n\n    this.store.on('disconnect', function () {\n      self.emit('disconnect');\n    });\n\n    process.nextTick(function() {\n      tolerate(function(callback) {\n        self.store.connect(callback);\n      }, self.options.timeout || 0, function (err) {\n        if (err) {\n          debug(err);\n          if (callback) callback(err);\n          return;\n        }\n        if (!self.publisher) {\n          debug('no publisher defined');\n          if (callback) callback(null);\n          return;\n        }\n        initDispatcher();\n      });\n    });\n  },\n\n  /**\n   * loads the events\n   * @param {Object || String} query    the query object [optional]\n   * @param {Number}           skip     how many events should be skipped? [optional]\n   * @param {Number}           limit    how many events do you want in the result? [optional]\n   * @param {Function}         callback the function that will be called when this action has finished\n   *                                    `function(err, events){}`\n   */\n  getEvents: function (query, skip, limit, callback) {\n    if (typeof query === 'function') {\n      callback = query;\n      skip = 0;\n      limit = -1;\n      query = {};\n    } else if (typeof skip === 'function') {\n      callback = skip;\n      skip = 0;\n      limit = -1;\n      if (typeof query === 'number') {\n        skip = query;\n        query = {};\n      }\n    } else if (typeof limit === 'function') {\n      callback = limit;\n      limit = -1;\n      if (typeof query === 'number') {\n        limit = skip;\n        skip = query;\n        query = {};\n      }\n    }\n\n    if (typeof query === 'string') {\n      query = { aggregateId: query };\n    }\n\n    var self = this;\n\n    this.store.getEvents(query, skip, limit, function (err, evts) {\n      if (err) {\n        return callback(err);\n      }\n      evts.next = function nextFn(callback) {\n        if (limit < 0) {\n          var resEvts = [];\n          resEvts.next = nextFn;\n          return process.nextTick(function () { callback(null, resEvts) });\n        }\n        skip += limit;\n        self.getEvents(query, skip, limit, callback);\n      };\n\n      callback(null, evts);\n    });\n  },\n\n  /**\n   * loads all the events since passed commitStamp\n   * @param {Date}     commitStamp the date object\n   * @param {Number}   skip        how many events should be skipped? [optional]\n   * @param {Number}   limit       how many events do you want in the result? [optional]\n   * @param {Function} callback    the function that will be called when this action has finished\n   *                               `function(err, events){}`\n   */\n  getEventsSince: function (commitStamp, skip, limit, callback) {\n    if (!commitStamp) {\n      var err = new Error('Please pass in a date object!');\n      debug(err);\n      throw err;\n    }\n\n    commitStamp = new Date(commitStamp);\n\n    if (typeof skip === 'function') {\n      callback = skip;\n      skip = 0;\n      limit = -1;\n    } else if (typeof limit === 'function') {\n      callback = limit;\n      limit = -1;\n    }\n\n    var self = this;\n\n    this.store.getEventsSince(commitStamp, skip, limit, function (err, evts) {\n      if (err) {\n        return callback(err);\n      }\n      evts.next = function nextFn(callback) {\n        if (limit < 0) {\n          var resEvts = [];\n          resEvts.next = nextFn;\n          return process.nextTick(function () { callback(null, resEvts) });\n        }\n        skip += limit;\n        self.getEventsSince(commitStamp, skip, limit, callback);\n      };\n\n      callback(null, evts);\n    });\n  },\n\n  /**\n   * loads the events\n   * @param {Object || String} query    the query object\n   * @param {Number}           revMin   revision start point [optional]\n   * @param {Number}           revMax   revision end point (hint: -1 = to end) [optional]\n   * @param {Function}         callback the function that will be called when this action has finished\n   *                                    `function(err, events){}`\n   */\n  getEventsByRevision: function (query, revMin, revMax, callback) {\n    if (typeof revMin === 'function') {\n      callback = revMin;\n      revMin = 0;\n      revMax = -1;\n    } else if (typeof revMax === 'function') {\n      callback = revMax;\n      revMax = -1;\n    }\n\n    if (typeof query === 'string') {\n      query = { aggregateId: query };\n    }\n\n    if (!query.aggregateId) {\n      var err = new Error('An aggregateId should be passed!');\n      debug(err);\n      if (callback) callback(err);\n      return;\n    }\n\n    this.store.getEventsByRevision(query, revMin, revMax, callback);\n  },\n\n  /**\n   * loads the event stream\n   * @param {Object || String} query    the query object\n   * @param {Number}           revMin   revision start point [optional]\n   * @param {Number}           revMax   revision end point (hint: -1 = to end) [optional]\n   * @param {Function}         callback the function that will be called when this action has finished\n   *                                    `function(err, eventstream){}`\n   */\n  getEventStream: function (query, revMin, revMax, callback) {\n    if (typeof revMin === 'function') {\n      callback = revMin;\n      revMin = 0;\n      revMax = -1;\n    } else if (typeof revMax === 'function') {\n      callback = revMax;\n      revMax = -1;\n    }\n\n    if (typeof query === 'string') {\n      query = { aggregateId: query };\n    }\n\n    if (!query.aggregateId) {\n      var err = new Error('An aggregateId should be passed!');\n      debug(err);\n      if (callback) callback(err);\n      return;\n    }\n\n    var self = this;\n\n    this.getEventsByRevision(query, revMin, revMax, function(err, evts) {\n      if (err) {\n        return callback(err);\n      }\n      callback(null, new EventStream(self, query, evts));\n    });\n  },\n\n  /**\n   * loads the next snapshot back from given max revision\n   * @param {Object || String} query    the query object\n   * @param {Number}           revMax   revision end point (hint: -1 = to end) [optional]\n   * @param {Function}         callback the function that will be called when this action has finished\n   *                                    `function(err, snapshot, eventstream){}`\n   */\n  getFromSnapshot: function (query, revMax, callback) {\n    if (typeof revMax === 'function') {\n      callback = revMax;\n      revMax = -1;\n    }\n\n    if (typeof query === 'string') {\n      query = { aggregateId: query };\n    }\n\n    if (!query.aggregateId) {\n      var err = new Error('An aggregateId should be passed!');\n      debug(err);\n      if (callback) callback(err);\n      return;\n    }\n\n    var self = this;\n\n    async.waterfall([\n\n      function getSnapshot(callback) {\n        self.store.getSnapshot(query, revMax, callback);\n      },\n\n      function getEventStream(snap, callback) {\n        var rev = 0;\n\n        if (snap && (snap.revision !== undefined && snap.revision !== null)) {\n          rev = snap.revision + 1;\n        }\n\n        self.getEventStream(query, rev, revMax, function(err, stream) {\n          if (err) {\n            return callback(err);\n          }\n\n          if (rev > 0 && stream.lastRevision == -1) {\n            stream.lastRevision = snap.revision;\n          }\n\n          callback(null, snap, stream);\n        });\n      }],\n\n      callback\n    );\n  },\n\n  /**\n   * stores a new snapshot\n   * @param {Object}   obj      the snapshot data\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  createSnapshot: function(obj, callback) {\n    if (obj.streamId && !obj.aggregateId) {\n      obj.aggregateId = obj.streamId;\n    }\n\n    if (!obj.aggregateId) {\n      var err = new Error('An aggregateId should be passed!');\n      debug(err);\n      if (callback) callback(err);\n      return;\n    }\n\n    obj.streamId = obj.aggregateId;\n\n    var self = this;\n\n    async.waterfall([\n        function getNewIdFromStorage(callback) {\n          self.getNewId(callback);\n        },\n        function commit(id, callback) {\n          try {\n            var snap = new Snapshot(id, obj);\n            snap.commitStamp = new Date();\n          } catch (err) {\n            return callback(err);\n          }\n\n          self.store.addSnapshot(snap, function(error) {\n            if (self.options.maxSnapshotsCount) {\n              self.store.cleanSnapshots(_.pick(obj, 'aggregateId', 'aggregate', 'context'), callback);\n            } else {\n              callback(error);\n            }\n          });\n        }],\n      callback\n    );\n  },\n\n  /**\n   * commits all uncommittedEvents in the eventstream\n   * @param eventstream the eventstream that should be saved (hint: directly use the commit function on eventstream)\n   * @param {Function}  callback the function that will be called when this action has finished\n   *                             `function(err, eventstream){}` (hint: eventstream.eventsToDispatch)\n   */\n  commit: function(eventstream, callback) {\n\n    var self = this;\n\n    async.waterfall([\n\n      function getNewCommitId(callback) {\n        self.getNewId(callback);\n      },\n\n      function commitEvents(id, callback) {\n        // start committing.\n        var event,\n          currentRevision = eventstream.currentRevision(),\n          uncommittedEvents = [].concat(eventstream.uncommittedEvents);\n        eventstream.uncommittedEvents = [];\n        for (var i = 0, len = uncommittedEvents.length; i < len; i++) {\n          event = uncommittedEvents[i];\n          event.id = id + i.toString();\n          event.commitId = id;\n          event.commitSequence = i;\n          event.restInCommitStream = len - 1 - i;\n          event.commitStamp = new Date();\n          currentRevision++;\n          event.streamRevision = currentRevision;\n\n          event.applyMappings();\n        }\n\n        self.store.addEvents(uncommittedEvents, function(err) {\n          if (err) {\n            // add uncommitted events back to eventstream\n            eventstream.uncommittedEvents = uncommittedEvents.concat(eventstream.uncommittedEvents);\n            return callback(err);\n          }\n\n          if (self.publisher && self.dispatcher) {\n            // push to undispatchedQueue\n            self.dispatcher.addUndispatchedEvents(uncommittedEvents);\n          } else {\n            eventstream.eventsToDispatch = [].concat(uncommittedEvents);\n          }\n\n          // move uncommitted events to events\n          eventstream.events = eventstream.events.concat(uncommittedEvents);\n          eventstream.currentRevision();\n\n          callback(null, eventstream);\n        });\n      }],\n\n      callback\n    );\n  },\n\n  /**\n   * loads all undispatched events\n   * @param {Object || String} query    the query object [optional]\n   * @param {Function}         callback the function that will be called when this action has finished\n   *                                    `function(err, events){}`\n   */\n  getUndispatchedEvents: function (query, callback) {\n    if (!callback) {\n      callback = query;\n      query = null;\n    }\n\n    if (typeof query === 'string') {\n      query = { aggregateId: query };\n    }\n\n    this.store.getUndispatchedEvents(query, callback);\n  },\n\n  /**\n   * loads the last event\n   * @param {Object || String} query    the query object [optional]\n   * @param {Function}         callback the function that will be called when this action has finished\n   *                                    `function(err, event){}`\n   */\n  getLastEvent: function (query, callback) {\n    if (!callback) {\n      callback = query;\n      query = null;\n    }\n\n    if (typeof query === 'string') {\n      query = { aggregateId: query };\n    }\n\n    this.store.getLastEvent(query, callback);\n  },\n\n  /**\n   * loads the last event in a stream\n   * @param {Object || String} query    the query object [optional]\n   * @param {Function}         callback the function that will be called when this action has finished\n   *                                    `function(err, eventstream){}`\n   */\n  getLastEventAsStream: function (query, callback) {\n    if (!callback) {\n      callback = query;\n      query = null;\n    }\n\n    if (typeof query === 'string') {\n      query = { aggregateId: query };\n    }\n\n    var self = this;\n\n    this.store.getLastEvent(query, function (err, evt) {\n      if (err) return callback(err);\n\n      callback(null, new EventStream(self, query, evt ? [evt] : []));\n    });\n  },\n\n  /**\n   * Sets the given event to dispatched.\n   * @param {Object || String} evtOrId  the event object or its id\n   * @param {Function}         callback the function that will be called when this action has finished [optional]\n   */\n  setEventToDispatched: function (evtOrId, callback) {\n    if (typeof evtOrId === 'object') {\n      evtOrId = evtOrId.id;\n    }\n    this.store.setEventToDispatched(evtOrId, callback);\n  },\n\n  /**\n   * loads a new id from store\n   * @param {Function} callback the function that will be called when this action has finished\n   */\n  getNewId: function (callback) {\n    this.store.getNewId(callback);\n  }\n\n});\n\nmodule.exports = Eventstore;\n","/home/travis/build/npmtest/node-npmtest-eventstore/node_modules/eventstore/lib/eventDispatcher.js":"'use strict';\n\nvar debug = require('debug')('eventstore:eventdispatcher');\n\n/**\n * Eventstore constructor\n * @param {Object} options The options.\n * @param publisher the publisher that should be injected\n * @param store the store that should be injected\n * @constructor\n */\nfunction EventDispatcher(publisher, store) {\n  this.publisher = publisher;\n  this.store = store;\n  this.undispatchedEventsQueue = [];\n}\n\n/**\n * Triggers to publish all events in undispatchedEventsQueue.\n */\nfunction trigger (dispatcher) {\n  var queue = dispatcher.undispatchedEventsQueue || []\n  var event;\n\n  // if the last loop is still in progress leave this loop\n  if (dispatcher.isRunning) return;\n\n  dispatcher.isRunning = true;\n\n  (function next (e) {\n\n    // dipatch one event in queue and call the _next_ callback, which\n    // will call _process_ for the next undispatched event in queue.\n    function process (event, nxt) {\n\n      // Publish it now...\n      debug('publish event...');\n      dispatcher.publisher(event.payload, function(err) {\n        if (err) {\n          return debug(err);\n        }\n        // ...and set the published event to dispatched.\n        debug('set event to dispatched...');\n        dispatcher.store.setEventToDispatched(event, function(err) {\n          if (err) {\n            debug(err);\n          } else {\n            debug('event set to dispatched');\n          }\n        });\n      });\n\n      nxt();\n    }\n\n    // serial process all events in queue\n    if (!e && queue.length) {\n      process(queue.shift(), next)\n    } else {\n      debug(e);\n    }\n  })();\n\n  dispatcher.isRunning = false;\n}\n\nEventDispatcher.prototype = {\n\n  /**\n   * Queues the passed in events for dispatching.\n   * @param events\n   */\n  addUndispatchedEvents: function(events) {\n    var self = this;\n    events.forEach(function(event) {\n      self.undispatchedEventsQueue.push(event);\n    });\n    trigger(this);\n  },\n\n  /**\n   * Starts the instance to publish all undispatched events.\n   * @param callback the function that will be called when this action has finished\n   */\n  start: function(callback) {\n\n    if (typeof this.publisher !== 'function') {\n      var pubErrMsg = 'publisher not injected!';\n      debug(pubErrMsg);\n      if (callback) callback(new Error(pubErrMsg));\n      return;\n    }\n\n    if (!this.store || typeof this.store.getUndispatchedEvents !== 'function'\n                    || typeof this.store.setEventToDispatched !== 'function') {\n      var storeErrMsg = 'store not injected!';\n      debug(storeErrMsg);\n      if (callback) callback(new Error(storeErrMsg))\n      return;\n    }\n\n    var self = this;\n\n    // Get all undispatched events from store and queue them\n    // before all other events passed in by the addUndispatchedEvents function.\n    this.store.getUndispatchedEvents(function(err, events) {\n\n      if (err) {\n        debug(err);\n        if (callback) callback(err);\n        return;\n      }\n\n      var triggered = false;\n      if (events) {\n        for (var i = 0, len = events.length; i < len; i++) {\n          self.undispatchedEventsQueue.push(events[i]);\n          // If there are a lot of events then we can hit issues with the call stack size when processing in one go\n          triggered = false;\n          if (i % 1000 === 0){\n            triggered = true;\n            trigger(self);\n          }\n        }\n      }\n\n      if (!triggered) {\n        trigger(self);\n      }\n\n      if (callback) callback(null);\n    });\n  }\n};\n\nmodule.exports = EventDispatcher;\n","/home/travis/build/npmtest/node-npmtest-eventstore/node_modules/eventstore/lib/eventStream.js":"'use strict';\n\nvar debug = require('debug')('eventstore:eventstream'),\n  _ = require('lodash'),\n  Event = require('./event');\n\n/**\n * EventStream constructor\n * The eventstream is one of the main objects to interagate with the eventstore.\n * @param {Object} eventstore the eventstore that should be injected\n * @param {Object} query the query object\n * @param {Array} events the events (from store)\n * @constructor\n */\nfunction EventStream (eventstore, query, events) {\n  if (!eventstore) {\n    var errESMsg = 'eventstore not injected!';\n    debug(errESMsg);\n    throw new Error(errESMsg);\n  }\n\n  if (typeof eventstore.commit !== 'function') {\n    var errESfnMsg = 'eventstore.commit not injected!';\n    debug(errESfnMsg);\n    throw new Error(errESfnMsg);\n  }\n\n  if (!query) {\n    var errQryMsg = 'query not injected!';\n    debug(errQryMsg);\n    throw new Error(errQryMsg);\n  }\n\n  if (!query.aggregateId) {\n    var errAggIdMsg = 'query.aggregateId not injected!';\n    debug(errAggIdMsg);\n    throw new Error(errAggIdMsg);\n  }\n\n  if (events) {\n    if (!_.isArray(events)) {\n      var errEvtsArrMsg = 'events should be an array!';\n      debug(errEvtsArrMsg);\n      throw new Error(errEvtsArrMsg);\n    }\n    \n    for (var i = 0, len = events.length; i < len; i++) {\n      var evt = events[i];\n      if (evt.streamRevision === undefined || evt.streamRevision === null) {\n        var errEvtMsg = 'The events passed should all have a streamRevision!';\n        debug(errEvtMsg);\n        throw new Error(errEvtMsg);\n      }\n    }\n  }\n  \n  this.eventstore = eventstore;\n  this.streamId = query.aggregateId;\n  this.aggregateId = query.aggregateId;\n  this.aggregate = query.aggregate;\n  this.context = query.context;\n  this.events = events || [];\n  this.uncommittedEvents = [];\n  this.lastRevision = -1;\n  \n  this.events = _.sortBy(this.events, 'streamRevision');\n\n  // to update lastRevision...\n  this.currentRevision();\n}\n\nEventStream.prototype = {\n\n  /**\n   * This helper function calculates and returns the current stream revision.\n   * @returns {Number} lastRevision\n   */\n  currentRevision: function() {\n    for (var i = 0, len = this.events.length; i < len; i++) {\n      if (this.events[i].streamRevision > this.lastRevision) {\n        this.lastRevision = this.events[i].streamRevision;\n      }\n    }\n    \n    return this.lastRevision;\n  },\n\n  /**\n   * adds an event to the uncommittedEvents array\n   * @param {Object} event\n   */\n  addEvent: function(event) {\n    new Event(this, event, this.eventstore.eventMappings);\n  },\n\n  /**\n   * adds an array of events to the uncommittedEvents array\n   * @param {Array} events\n   */\n  addEvents: function(events) {\n    if (!_.isArray(events)) {\n      var errEvtsArrMsg = 'events should be an array!';\n      debug(errEvtsArrMsg);\n      throw new Error(errEvtsArrMsg);\n    }\n    var self = this;\n    _.each(events, function(evt) {\n      self.addEvent(evt);\n    });\n  },\n  \n  /**\n   * commits all uncommittedEvents\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  commit: function(callback) {\n    this.eventstore.commit(this, callback);\n  }\n};\n\nmodule.exports = EventStream;\n","/home/travis/build/npmtest/node-npmtest-eventstore/node_modules/eventstore/lib/event.js":"'use strict';\n\nvar debug = require('debug')('eventstore:event'),\n  dotty = require('dotty'),\n  _ = require('lodash');\n\n/**\n * Event constructor\n * @param {EventStream} eventstream the corresponding event stream object\n * @param {Object}      event       the event object\n * @constructor\n */\nfunction Event (eventstream, event, eventMappings) {\n  if (!eventstream) {\n    var errStreamMsg = 'eventstream not injected!';\n    debug(errStreamMsg);\n    throw new Error(errStreamMsg);\n  }\n  \n  if (!event) {\n    var errEvtMsg = 'event not injected!';\n    debug(errEvtMsg);\n    throw new Error(errEvtMsg);\n  }\n\n  if (!eventstream.aggregateId) {\n    var errAggIdMsg = 'eventstream.aggregateId not injected!';\n    debug(errAggIdMsg);\n    throw new Error(errAggIdMsg);\n  }\n\n  if (!_.isArray(eventstream.uncommittedEvents)) {\n    var errAggIdMsg = 'eventstream.uncommittedEvents not injected!';\n    debug(errAggIdMsg);\n    throw new Error(errAggIdMsg);\n  }\n\n  eventMappings = eventMappings || {};\n\n  this.streamId = eventstream.aggregateId;\n  this.aggregateId = eventstream.aggregateId;\n  this.aggregate = eventstream.aggregate;\n  this.context = eventstream.context;\n  this.streamRevision = null;\n  this.commitId = null;\n  this.commitSequence = null;\n  this.commitStamp = null;\n  this.payload = event || null;\n\n  this.applyMappings = function applyMappings() {\n    _.keys(eventMappings).forEach(function (key) {\n      if (this[key] !== undefined && this[key] !== null) {\n        dotty.put(this.payload, eventMappings[key], this[key]);\n      }\n    }.bind(this));\n  };\n\n  eventstream.uncommittedEvents.push(this);\n}\n\nmodule.exports = Event;\n","/home/travis/build/npmtest/node-npmtest-eventstore/node_modules/eventstore/lib/snapshot.js":"'use strict';\n\nvar debug = require('debug')('eventstore:snapshot');\n\n/**\n * Snapshot constructor\n * The snapshot object will be persisted to the store.\n * @param {String} id  the id of the snapshot\n * @param {Object} obj the snapshot object infos\n * @constructor\n */\nfunction Snapshot (id, obj) {\n  if (!id) {\n    var errIdMsg = 'id not injected!';\n    debug(errIdMsg);\n    throw new Error(errIdMsg);\n  }\n  \n  if (!obj) {\n    var errObjMsg = 'object not injected!';\n    debug(errObjMsg);\n    throw new Error(errObjMsg);\n  }\n\n  if (!obj.aggregateId) {\n    var errAggIdMsg = 'object.aggregateId not injected!';\n    debug(errAggIdMsg);\n    throw new Error(errAggIdMsg);\n  }\n\n  if (!obj.data) {\n    var errDataMsg = 'object.data not injected!';\n    debug(errDataMsg);\n    throw new Error(errDataMsg);\n  }\n\n  this.id = id;\n  this.streamId = obj.aggregateId;\n  this.aggregateId = obj.aggregateId;\n  this.aggregate = obj.aggregate || null;\n  this.context = obj.context || null;\n  this.commitStamp = null;\n  this.revision = obj.revision;\n  this.version = obj.version;\n  this.data = obj.data;\n}\n\nmodule.exports = Snapshot;\n","/home/travis/build/npmtest/node-npmtest-eventstore/node_modules/eventstore/lib/base.js":"'use strict';\n\nvar util = require('util'),\n  EventEmitter = require('events').EventEmitter,\n  prequire = require('parent-require'),\n  _ = require('lodash'),\n  uuid = require('uuid').v4;\n\n/**\n * Store constructor\n * @param {Object} options The options can have information like host, port, etc. [optional]\n */\nfunction Store(options) {\n  options = options || {};\n\n  EventEmitter.call(this);\n}\n\nutil.inherits(Store, EventEmitter);\n\nfunction implementError (callback) {\n  var err = new Error('Please implement this function!');\n  if (callback) callback(err);\n  throw err;\n}\n\nfunction silentWarning(callback) {\n  console.warn('Snapshot cleaning is not implemented for this kind of store');\n  callback();\n}\n\n_.extend(Store.prototype, {\n\n  /**\n   * Initiate communication with the queue.\n   * @param  {Function} callback The function, that will be called when the this action is completed. [optional]\n   *                             `function(err, queue){}`\n   */\n  connect: implementError,\n\n  /**\n   * Terminate communication with the queue.\n   * @param  {Function} callback The function, that will be called when the this action is completed. [optional]\n   *                             `function(err){}`\n   */\n  disconnect: implementError,\n\n  /**\n   * Use this function to obtain a new id.\n   * @param  {Function} callback The function, that will be called when the this action is completed.\n   *                             `function(err, id){}` id is of type String.\n   */\n  getNewId: function (callback) {\n    var id = uuid().toString();\n    if (callback) callback(null, id);\n  },\n\n  /**\n   * loads the events\n   * @param {Object}   query    the query object\n   * @param {Number}   skip     how many events should be skipped?\n   * @param {Number}   limit    how many events do you want in the result?\n   * @param {Function} callback the function that will be called when this action has finished\n   *                            `function(err, events){}`\n   */\n  getEvents: function (query, skip, limit, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * loads all the events since passed commitStamp\n   * @param {Date}     commitStamp the date object\n   * @param {Number}   skip        how many events should be skipped? [optional]\n   * @param {Number}   limit       how many events do you want in the result? [optional]\n   * @param {Function} callback    the function that will be called when this action has finished\n   *                               `function(err, events){}`\n   */\n  getEventsSince: function (commitStamp, skip, limit, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * loads the events\n   * @param {Object}   query    the query object\n   * @param {Number}   revMin   revision start point\n   * @param {Number}   revMax   revision end point (hint: -1 = to end)\n   * @param {Function} callback the function that will be called when this action has finished\n   *                            `function(err, events){}`\n   */\n  getEventsByRevision: function (query, revMin, revMax, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * loads the next snapshot back from given max revision\n   * @param {Object}   query    the query object\n   * @param {Number}   revMax   revision end point (hint: -1 = to end)\n   * @param {Function} callback the function that will be called when this action has finished\n   *                            `function(err, snapshot){}`\n   */\n  getSnapshot: function (query, revMax, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * stores a new snapshot\n   * @param {Object}   snap     the snapshot data\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  addSnapshot: function(snap, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * stores a new snapshot\n   * @param {Object}   query    the query object\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  cleanSnapshots: function(query, callback) {\n    silentWarning(callback);\n  },\n\n  /**\n   * stores the passed events\n   * @param {Array}    evts     the events\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  addEvents: function (evts, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * loads the last event\n   * @param {Object}   query    the query object [optional]\n   * @param {Function} callback the function that will be called when this action has finished\n   *                            `function(err, event){}`\n   */\n  getLastEvent: function (query, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * loads all undispatched events\n   * @param {Object}   query    the query object [optional]\n   * @param {Function} callback the function that will be called when this action has finished\n   *                            `function(err, events){}`\n   */\n  getUndispatchedEvents: function (query, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * Sets the given event to dispatched.\n   * @param {String}   id       the event id\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  setEventToDispatched: function (id, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * NEVER USE THIS FUNCTION!!! ONLY FOR TESTS!\n   * clears the complete store...\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  clear: function (callback) {\n    implementError(callback);\n  }\n});\n\nStore.use = function (toRequire) {\n  var required;\n  try {\n    required = require(toRequire);\n  } catch (e) {\n    // workaround when `npm link`'ed for development\n    required = prequire(toRequire);\n  }\n  return required;\n};\n\nmodule.exports = Store;\n","/home/travis/build/npmtest/node-npmtest-eventstore/node_modules/eventstore/lib/databases/azuretable.js":"'use strict';\n\n\nvar util = require('util'),\n  Store = require('../base'),\n  _ = require('lodash'),\n  async = require('async'),\n  azure = Store.use('azure-storage'),\n  eg = azure.TableUtilities.entityGenerator,\n  debug = require('debug')('eventstore:store:azuretable');\n\nfunction AzureTable(options) {\n\n  options = options || {};\n\n  var azureConf = {\n    storageAccount: 'nodeeventstore',\n    storageAccessKey: 'aXJaod96t980AbNwG9Vh6T3ewPQnvMWAn289Wft9RTv+heXQBxLsY3Z4w66CI7NN12+1HUnHM8S3sUbcI5zctg==',\n    storageTableHost: 'https://nodeeventstore.table.core.windows.net/'\n  };\n\n  this.options = _.defaults(options, azureConf);\n\n  var defaults = {\n    eventsTableName: 'events',\n    undispatchedEventsTableName: 'undispatchedevents',\n    snapshotsTableName: 'snapshots'\n  };\n\n  this.options = _.defaults(this.options, defaults);\n}\n\nutil.inherits(AzureTable, Store);\n\n_.extend(AzureTable.prototype, {\n\n  connect: function (callback) {\n    var self = this;\n    var retryOperations = new azure.ExponentialRetryPolicyFilter();\n    var server = azure.createTableService(this.options.storageAccount, this.options.storageAccessKey, this.options.storageTableHost).withFilter(retryOperations);\n\n    self.client = server;\n    self.isConnected = true;\n\n    var createEventsTable = function (callback) {\n      self.client.createTableIfNotExists(self.options.eventsTableName, callback);\n    };\n\n    var createSnapshotTable = function (callback) {\n      self.client.createTableIfNotExists(self.options.snapshotsTableName, callback);\n    };\n\n    var createUndispatchedEventsTable = function (done) {\n      self.client.createTableIfNotExists(self.options.undispatchedEventsTableName, done)\n    };\n\n    async.parallel([\n      createEventsTable,\n      createSnapshotTable,\n      createUndispatchedEventsTable\n    ], function (err) {\n      if (err) {\n        if (callback) callback(err);\n      } else {\n        self.emit('connect');\n        if (callback) callback(null, self);\n      }\n    });\n  },\n\n  disconnect: function (callback) {\n    this.emit('disconnect');\n    if (callback) callback(null);\n  },\n\n  clear: function (done) {\n    var self = this;\n    var query = new azure.TableQuery();\n\n    var clearEventsTable = function (callback) {\n      self.client.queryEntities(self.options.eventsTableName, query, null, function (err, entities) {\n        if (err) {\n          return callback(err);\n        }\n\n        async.each(entities.entries, function (entity, callback) {\n            self.client.deleteEntity(self.options.eventsTableName, entity, function (error, response) {\n              callback(error);\n            });\n          },\n          callback);\n      });\n    };\n\n    var clearSnapshotsTable = function (callback) {\n      self.client.queryEntities(self.options.snapshotsTableName, query, null, function (err, entities) {\n        if (err) {\n          return callback(err);\n        }\n        async.each(entities.entries, function (entity, callback) {\n            self.client.deleteEntity(self.options.snapshotsTableName, entity, function (error, response) {\n              callback(error);\n            });\n          },\n          callback);\n      });\n    };\n\n    var clearUndispatchedEventsTable = function (callback) {\n      self.client.queryEntities(self.options.undispatchedEventsTableName, query, null, function (err, entities) {\n        if (err) {\n          return callback(err);\n        }\n        async.each(entities.entries, function (entity, callback) {\n            self.client.deleteEntity(self.options.undispatchedEventsTableName, entity, function (error, response) {\n              callback(error);\n            });\n          },\n          callback);\n      });\n    };\n\n    async.parallel([\n      clearEventsTable,\n      clearSnapshotsTable,\n      clearUndispatchedEventsTable\n    ], function (err) {\n      if (err) {\n        debug(err);\n        if (done) done(err);\n//        if (done) done(null); // strange on azure...\n        return;\n      }\n      if (done) done(null, self);\n    });\n  },\n\n  addEvents: function (events, callback) {\n    var self = this;\n    var batch = new azure.TableBatch();\n\n    var noAggId = _.every(events, function (event) {\n      return !event.aggregateId\n    });\n\n    if (noAggId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    async.concat(events,\n      function (event, callback) {\n\n        var results = [\n          function (callback) {\n            var storedEvent = new StoredEvent(event);\n            self.client.insertEntity(self.options.eventsTableName, storedEvent, callback);\n          },\n          function (callback) {\n            var storedUndispatchedEvent = new StoredUndispatchedEvent(event);\n            self.client.insertEntity(self.options.undispatchedEventsTableName, storedUndispatchedEvent, callback);\n          }\n        ]\n\n        callback(null, results);\n      },\n      function (err, results) {\n        async.parallel(results, callback);\n      }\n    );\n  },\n\n  getEvents: function (query, skip, limit, callback) {\n    var self = this;\n    var tableQuery = new azure.TableQuery();\n    var continuationToken = null;\n    var entities = [];\n\n    var pageSize = skip + limit;\n\n    tableQuery = _(query)\n      .pick(['aggregate', 'context', 'aggregateId'])\n      .reduce(function (result, val, key) {\n        key = key === 'aggregateId' ? 'PartitionKey' : key;\n        if (result._where.length === 0) return tableQuery.where(key + ' eq ?', val);\n        return result.and(key + ' eq ?', val)\n      }, tableQuery);\n\n\n    if (limit !== -1) {\n      tableQuery = tableQuery.top(pageSize);\n    }\n\n    async.doWhilst(function (end) {\n      // retrieve entities\n      self.client.queryEntities(self.options.eventsTableName, tableQuery, continuationToken, function (err, results) {\n        if (err) {\n          debug(err);\n          return end(err);\n        }\n        continuationToken = results.continuationToken;\n        entities = entities.concat(results.entries);\n        end(null);\n      });\n    }, function () {\n      // test if we need to load more\n      return (entities.length < pageSize || pageSize == -1) ? continuationToken !== null : false;\n    }, function (err) {\n      // return results\n      if (err) {\n        debug(err);\n        return callback(err);\n      }\n\n      entities = entities.map(MapStoredEventToEvent);\n\n      entities = _.sortBy(entities, function (e) {\n        return e.commitStamp.getTime();\n      });\n\n      if (limit === -1) {\n        entities = entities.slice(skip);\n      } else {\n        entities = entities.slice(skip, skip + limit);\n      }\n\n      callback(null, entities);\n    });\n  },\n\n  getEventsSince: function (date, skip, limit, callback) {\n    var self = this;\n    var tableQuery = new azure.TableQuery();\n    var continuationToken = null;\n    var entities = [];\n\n    var pageSize = skip + limit;\n\n    tableQuery.where('commitStamp >= ?', date);\n\n    async.doWhilst(function (end) {\n      // retrieve entities\n      self.client.queryEntities(self.options.eventsTableName, tableQuery, continuationToken, function (err, results) {\n        if (err) {\n          debug(err);\n          return end(err);\n        }\n        continuationToken = results.continuationToken;\n        entities = entities.concat(results.entries);\n        end(null);\n      });\n    }, function () {\n      // test if we need to load more\n      return (entities.length < pageSize || pageSize == -1) ? continuationToken !== null : false;\n    }, function (err) {\n      // return results\n      if (err) {\n        debug(err);\n        return callback(err);\n      }\n\n      entities = entities.map(MapStoredEventToEvent);\n\n      entities = _.sortBy(entities, function (e) {\n        return e.commitStamp.getTime();\n      });\n\n      if (limit === -1) {\n        entities = entities.slice(skip);\n      } else {\n        entities = entities.slice(skip, pageSize);\n      }\n\n      callback(null, entities);\n    });\n  },\n\n  getEventsByRevision: function (query, revMin, revMax, callback) {\n\n    var self = this;\n    var tableQuery = new azure.TableQuery();\n    var continuationToken = null;\n    var entities = [];\n\n    if (!query.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    tableQuery = _(query)\n      .pick(['aggregate', 'context', 'aggregateId'])\n      .reduce(function (result, val, key) {\n        key = key === 'aggregateId' ? 'PartitionKey' : key;\n        if (result._where.length === 0) return tableQuery.where(key + ' eq ?', val);\n        return result.and(key + ' eq ?', val)\n      }, tableQuery);\n\n\n    tableQuery = tableQuery.and('streamRevision >= ?', revMin);\n    if (revMax != -1) tableQuery = tableQuery.and('streamRevision < ?', revMax);\n\n    async.doWhilst(function (end) {\n      // retrieve entities\n      self.client.queryEntities(self.options.eventsTableName, tableQuery, continuationToken, function (err, results) {\n        if (err) {\n          debug(err);\n          return end(err);\n        }\n        continuationToken = results.continuationToken;\n        entities = entities.concat(results.entries);\n        end(null);\n      });\n    }, function () {\n      // test if we need to load more\n      return continuationToken !== null;\n    }, function (err) {\n      // return results\n      if (err) {\n        debug(err);\n        return callback(err);\n      }\n\n      entities = entities.map(MapStoredEventToEvent);\n\n      entities = _.sortBy(entities, function (e) {\n        return e.commitStamp.getTime();\n      });\n\n      callback(null, entities);\n    });\n  },\n\n  getUndispatchedEvents: function (query, callback) {\n\n    var self = this;\n    var tableQuery = new azure.TableQuery();\n    var continuationToken = null;\n    var entities = [];\n\n    if (query && query.aggregate) tableQuery.where('aggregate eq ?', query.aggregate);\n    if (query && query.context) tableQuery.where('context eq ?', query.context);\n    if (query && query.aggregateId) tableQuery.where('aggregateId eq ?', query.aggregateId);\n\n    async.doWhilst(function (end) {\n      // retrieve entities\n      self.client.queryEntities(self.options.undispatchedEventsTableName, tableQuery, continuationToken, function (err, results) {\n        if (err) {\n          debug(err);\n          return end(err);\n        }\n        continuationToken = results.continuationToken;\n        entities = entities.concat(results.entries);\n        end(null);\n      });\n    }, function () {\n      // test if we need to load more\n      return continuationToken !== null;\n    }, function (err) {\n      // return results\n      if (err) {\n        debug(err);\n        return callback(err);\n      }\n\n      entities = entities.map(MapStoredEventToEvent);\n\n      entities = _.sortBy(entities, function (e) {\n        return e.commitStamp.getTime();\n      });\n\n      callback(null, entities);\n    });\n  },\n\n  getLastEvent: function (query, callback) {\n\n    var self = this;\n    var tableQuery = new azure.TableQuery();\n    var continuationToken = null;\n    var entities = [];\n\n\n    tableQuery = _(query)\n      .pick(['aggregate', 'context', 'aggregateId'])\n      .reduce(function (result, val, key) {\n        key = key === 'aggregateId' ? 'PartitionKey' : key;\n        if (result._where.length === 0) return tableQuery.where(key + ' eq ?', val);\n        return result.and(key + ' eq ?', val)\n      }, tableQuery);\n\n    async.doWhilst(function (end) {\n      // retrieve entities\n      self.client.queryEntities(self.options.eventsTableName, tableQuery, continuationToken, function (err, results) {\n        if (err) {\n          debug(err);\n          return end(err);\n        }\n        continuationToken = results.continuationToken;\n        entities = entities.concat(results.entries);\n        end(null);\n      });\n    }, function () {\n      // test if we need to load more\n      return  continuationToken !== null;\n    }, function (err) {\n      // return results\n      if (err) {\n        debug(err);\n        return callback(err);\n      }\n\n      entities = entities.map(MapStoredEventToEvent);\n\n      entities = _.sortBy(entities, function (e) {\n        return [e.commitStamp.getTime(),\n                e.streamRevision,\n                e.commitSequence];\n      }).reverse();\n\n      callback(null, entities[0]);\n    });\n    //this.events.findOne(findStatement, {sort: [['commitStamp', 'desc'], ['streamRevision', 'desc'], ['commitSequence', 'desc']]}, callback);\n  },\n\n  setEventToDispatched: function (id, callback) {\n    var self = this;\n\n    var objDescriptor = {\n      PartitionKey: eg.String(id),\n      RowKey: eg.String(id)\n    };\n\n    self.client.deleteEntity(self.options.undispatchedEventsTableName, objDescriptor, null, callback);\n  },\n\n  addSnapshot: function (snap, callback) {\n    var self = this;\n\n    if (!snap.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    self.client.insertEntity(self.options.snapshotsTableName, new StoredSnapshot(snap), callback);\n  },\n\n  getSnapshot: function (query, revMax, callback) {\n\n    var self = this;\n    var tableQuery = new azure.TableQuery();\n    var continuationToken = null;\n    var entities = [];\n\n    if (!query.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    tableQuery = _(query)\n      .pick(['aggregate', 'context', 'aggregateId'])\n      .reduce(function (result, val, key) {\n        key = key === 'aggregateId' ? 'PartitionKey' : key;\n        if (result._where.length === 0) return tableQuery.where(key + ' eq ?', val);\n        return result.and(key + ' eq ?', val)\n      }, tableQuery);\n\n\n    if (revMax != -1) tableQuery = tableQuery.and('revision le ?', revMax);\n\n    async.doWhilst(function (end) {\n      // retrieve entities\n      self.client.queryEntities(self.options.snapshotsTableName, tableQuery, continuationToken, function (err, results) {\n        if (err) {\n          debug(err);\n          return end(err);\n        }\n        continuationToken = results.continuationToken;\n        entities = entities.concat(results.entries);\n        end(null);\n      });\n    }, function () {\n      // test if we need to load more\n      return continuationToken !== null;\n    }, function (err) {\n      // return results\n      if (err) {\n        debug(err);\n        return callback(err);\n      }\n\n      entities = entities.map(MapStoredSnapshotToSnapshot);\n\n      entities = _.sortBy(entities, function (e) {\n        return -e.commitStamp.getTime();\n      });\n\n      callback(null, entities[0]);\n    });\n\n  }\n\n});\n\nvar StoredEvent = function (event) {\n  this.PartitionKey = eg.EntityProperty(event.aggregateId);\n  this.RowKey = eg.EntityProperty(event.id);\n  this.aggregateId = eg.EntityProperty(event.aggregateId);\n  this.id = eg.EntityProperty(event.id);\n  this.context = eg.EntityProperty(event.context);\n  this.aggregate = eg.EntityProperty(event.aggregate);\n  this.streamRevision = eg.EntityProperty(event.streamRevision);\n  this.commitId = eg.EntityProperty(event.commitId);\n  this.commitSequence = eg.EntityProperty(event.commitSequence);\n  this.commitStamp = eg.EntityProperty(event.commitStamp);\n  this.header = eg.EntityProperty(event.header);\n  this.dispatched = eg.EntityProperty(event.dispatched || false);\n  this.payload = eg.EntityProperty(JSON.stringify(event.payload));\n};\n\nfunction MapStoredEventToEvent(storedEvent) {\n  var event = {\n    aggregateId: getEntityProperty(storedEvent.aggregateId),\n    id: getEntityProperty(storedEvent.id),\n    context: getEntityProperty(storedEvent.context),\n    aggregate: getEntityProperty(storedEvent.aggregate),\n    streamRevision: getEntityProperty(storedEvent.streamRevision),\n    commitId: getEntityProperty(storedEvent.commitId),\n    commitSequence: getEntityProperty(storedEvent.commitSequence),\n    commitStamp: getEntityProperty(storedEvent.commitStamp) || null,\n    header: getEntityProperty(storedEvent.header) || null,\n    dispatched: getEntityProperty(storedEvent.dispatched),\n    payload: JSON.parse(getEntityProperty(storedEvent.payload)) || null\n  };\n\n  return event;\n}\n\nvar StoredUndispatchedEvent = function (event) {\n  this.PartitionKey = eg.EntityProperty(event.id);\n  this.RowKey = eg.EntityProperty(event.id);\n  this.aggregateId = eg.EntityProperty(event.aggregateId);\n  this.id = eg.EntityProperty(event.id);\n  this.context = eg.EntityProperty(event.context);\n  this.aggregate = eg.EntityProperty(event.aggregate);\n  this.streamRevision = eg.EntityProperty(event.streamRevision);\n  this.commitId = eg.EntityProperty(event.commitId);\n  this.commitSequence = eg.EntityProperty(event.commitSequence);\n  this.commitStamp = eg.EntityProperty(event.commitStamp);\n  this.header = eg.EntityProperty(event.header);\n  this.dispatched = eg.EntityProperty(event.dispatched || false);\n  this.payload = eg.EntityProperty(JSON.stringify(event.payload));\n};\n\nvar StoredSnapshot = function (snapshot) {\n  this.PartitionKey = eg.EntityProperty(snapshot.aggregateId);\n  this.RowKey = eg.EntityProperty(snapshot.id);\n  this.id = eg.EntityProperty(snapshot.id);\n  this.aggregateId = eg.EntityProperty(snapshot.aggregateId);\n  this.aggregate = eg.EntityProperty(snapshot.aggregate) || undefined;\n  this.context = eg.EntityProperty(snapshot.context) || undefined;\n  this.revision = eg.EntityProperty(snapshot.revision);\n  this.version = eg.EntityProperty(snapshot.version);\n  this.commitStamp = eg.EntityProperty(snapshot.commitStamp);\n  this.data = eg.EntityProperty(JSON.stringify(snapshot.data));\n};\n\nfunction MapStoredSnapshotToSnapshot(storedSnapshot) {\n  var snapshot = {\n    id: getEntityProperty(storedSnapshot.id),\n    aggregateId: getEntityProperty(storedSnapshot.PartitionKey),\n    aggregate: getEntityProperty(storedSnapshot.aggregate) || undefined,\n    context: getEntityProperty(storedSnapshot.context) || undefined,\n    revision: getEntityProperty(storedSnapshot.revision),\n    version: getEntityProperty(storedSnapshot.version),\n    commitStamp: getEntityProperty(storedSnapshot.commitStamp),\n    data: JSON.parse(getEntityProperty(storedSnapshot.data)) || null\n  };\n\n  return snapshot;\n}\n\nvar getEntityProperty = function (propertyField) {\n  if (propertyField != null) {\n    return propertyField['_'];\n  } else {\n    return null;\n  }\n};\n\nmodule.exports = AzureTable;\n","/home/travis/build/npmtest/node-npmtest-eventstore/node_modules/eventstore/lib/databases/dynamodb.js":"'use strict';\n\nvar util = require('util'),\n  Store = require('../base'),\n  _ = require('lodash'),\n  async = require('async'),\n  aws = Store.use('aws-sdk'),\n  dbg = require('debug');\n\nvar debug = dbg('eventstore:store:dynamodb'),\n  error = dbg(\"eventstore:store:dynamodb:error\");\n\n/*\nfor information on optimizing access patterns see: https://medium.com/building-timehop/one-year-of-dynamodb-at-timehop-f761d9fe5fa1\n  - query when possible\n  - scan when you will really be visiting all items (or almost all, ex: clear, or undispatched)\n  - secondary index when you need only a subset (instead of scan) and it will still be cheaper to run SELECT N+1 query (get partition keys from 2ndary then get full item using getItem(key) )\n*/\nfunction DynamoDB(options) {\n\n  options = options || {};\n\n  var awsConf = {\n    // don't put AWS credentials in files. Use IAM, ~/.aws/credentials with $AWS_PROFILE, or env vars\n    // see: http://docs.aws.amazon.com/AWSJavaScriptSDK/guide/node-configuring.html\n    // example using credentials file with $AWS_PROFILE:\n    // $ AWS_PROFILE=my-non-default-profile npm test\n    region: \"us-west-2\",\n    endpointConf: {}\n  };\n\n  // support setting a specific endpoint for dynamodb (ex: DynamoDB local)\n  // examples usage for testing:\n  // $ AWS_DYNAMODB_ENDPOINT=http://localhost:8000 npm test\n  if (process.env[\"AWS_DYNAMODB_ENDPOINT\"]) {\n    awsConf.endpointConf = { endpoint: process.env[\"AWS_DYNAMODB_ENDPOINT\"] };\n  }\n\n  this.options = _.defaults(options, awsConf);\n\n  var defaults = {\n    eventsTableName: 'events',\n    undispatchedEventsTableName: 'undispatchedevents',\n    snapshotsTableName: 'snapshots',\n    // 3 write units / 1 read unit for events & undispatched is just low enough\n    // to trigger throttling w/o hitting the 20 test timeout. Takes about 5 minutes to run storeTest.js.\n    UndispatchedEventsReadCapacityUnits: 1,\n    UndispatchedEventsWriteCapacityUnits: 3,\n    EventsReadCapacityUnits: 1,\n    EventsWriteCapacityUnits: 3,\n    SnapshotReadCapacityUnits: 1,\n    SnapshotWriteCapacityUnits: 1,\n    useUndispatchedEventsTable: true\n  };\n\n  this.options = _.defaults(this.options, defaults);\n}\n\nutil.inherits(DynamoDB, Store);\n\n_.extend(DynamoDB.prototype, {\n\n  connect: function (callback) {\n    var self = this;\n    self.client = new aws.DynamoDB(self.options.endpointConf);\n    self.documentClient = new aws.DynamoDB.DocumentClient(self.client);\n    self.isConnected = true;\n\n    var createEventsTable = function (callback) {\n      createTableIfNotExists(self.client, EventsTableDefinition(self.options), callback);\n    };\n\n    var createSnapshotTable = function (callback) {\n      createTableIfNotExists(self.client, SnapshotTableDefinition(self.options), callback);\n    };\n\n    var createUndispatchedEventsTable = function (done) {\n      if (self.options.useUndispatchedEventsTable) {\n        createTableIfNotExists(self.client, UndispatchedEventsTableDefinition(self.options), done)\n      } else {\n        done();\n      }\n    };\n\n    async.parallel([\n      createEventsTable,\n      createSnapshotTable,\n      createUndispatchedEventsTable\n    ], function (err) {\n      if (err) {\n        error(\"connect error: \" + err);\n        if (callback) callback(err);\n      } else {\n        self.emit('connect');\n        if (callback) callback(null, self);\n      }\n    });\n  },\n\n  disconnect: function (callback) {\n    this.emit('disconnect');\n    if (callback) callback(null);\n  },\n\n  removeTables: function (done) {\n    var self = this;\n    // AWS has a limit on the number of DynamoDB tables for an account. Let's clean up when we're done\n    debug(\"remove all tables created for testing\");\n    deleteAllTempTables(self.client, self.options, function (err, result) {\n      if (err) {\n        error(\"removeTables error: \" + err);\n        return done(err);\n      }\n      return done(null, result);\n    });\n  },\n\n  clear: function (done) {\n    var self = this;\n\n    var clearEvents = function (callback) {\n      clearEventTables(self.options, self.documentClient, function (err) {\n        if (err) {\n          error(\"clearEventTables error: \" + err);\n          return callback(err);\n        }\n\n        callback(null, \"events\");\n      });\n    };\n\n    var clearSnapshots = function (callback) {\n      clearSnapshotsTable(self.options, self.documentClient, function (err) {\n        if (err) {\n          error(\"clearSnapshotsTable error: \" + err);\n          return callback(err);\n        }\n\n        callback(null, \"snapshots\");\n      });\n    };\n\n    async.parallel([\n      clearEvents,\n      clearSnapshots\n    ], function (err, data) {\n      if (err) {\n        error(\"removeTables error: \" + err);\n        if (done) done(err);\n        return;\n      }\n      if (done) done(null, self);\n    });\n  },\n\n  addEvents: function (events, callback) {\n    var self = this;\n\n    var noAggId = _.every(events, function (event) {\n      return !event.aggregateId\n    });\n\n    if (noAggId) {\n      var errMsg = 'aggregateId not defined!';\n      error(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    async.concatSeries(events,\n      function (event, callback) {\n\n        var results = [\n          function (callback) {\n            var storedEvent = {\n              TableName: self.options.eventsTableName,\n              Item: new StoredEvent(event),\n              ExpressionAttributeNames: {\n                \"#name\": \"aggregate\"\n              },\n              ConditionExpression: \"attribute_not_exists(aggregateId) and attribute_not_exists(streamRevision) and attribute_not_exists(context) and attribute_not_exists(#name)\"\n            };\n\n            debug(\"Saving event to events table: \" + JSON.stringify(storedEvent, null, 2));\n            self.documentClient.put(storedEvent, function (err, data) {\n              if (err) {\n                error(\"dynamodb.addEvents error: \" + JSON.stringify(err));\n                return callback(err);\n              } else {\n                debug(\"event saved\");\n                callback(null, data);\n              }\n            });\n          }];\n\n        if (self.options.useUndispatchedEventsTable) {\n          debug(\"using undispatchedevents table\");\n          results.push(function (callback) {\n            var storedEvent = {\n              TableName: self.options.undispatchedEventsTableName,\n              Item: new StoredEvent(event),\n              ConditionExpression: \"attribute_not_exists(id)\"\n            };\n\n            debug(\"Saving event to undispatchedevents table \" + JSON.stringify(storedEvent, null, 2));\n            self.documentClient.put(storedEvent, function (err, data) {\n              if (err) {\n                error(\"dynamodb.addUndispatchedEvents error: \" + JSON.stringify(err));\n                return callback(err);\n              } else {\n                debug(\"undispatched event saved\");\n                callback(null, data);\n              }\n            });\n          });\n        }\n\n        callback(null, results);\n      },\n      function (err, results) {\n        if (err) {\n          error(\"addEvents error: \" + JSON.stringify(err));\n        }\n        async.series(results, callback);\n      }\n    );\n  },\n\n  getEvents: function (query, skip, limit, callback) {\n    var self = this;\n    var client = new aws.DynamoDB.DocumentClient(self.options.endpointConf);\n    var exclusiveStartKey = null;\n    var entities = [];\n\n    var tableQuery = {\n      TableName: self.options.eventsTableName\n    };\n\n    var vals = {};\n\n    if (query && query.aggregateId) {\n      vals[\":a\"] = query.aggregateId;\n      tableQuery.KeyConditionExpression = \"aggregateId = :a\";\n    }\n\n    if (query && query.aggregate) {\n      vals[\":name\"] = query.aggregate;\n      tableQuery.FilterExpression = \"#name = :name\";\n      tableQuery.ExpressionAttributeNames = {\n        \"#name\": \"aggregate\"\n      };\n    }\n\n    if (query && query.context) {\n      vals[\":c\"] = query.context;\n      if (tableQuery.FilterExpression && tableQuery.FilterExpression.length !== 0)\n        tableQuery.FilterExpression += \" and context = :c\";\n      else\n        tableQuery.FilterExpression = \"context = :c\";\n    }\n\n    if (Object.keys(vals).length !== 0) {\n      tableQuery.ExpressionAttributeValues = vals;\n    }\n\n    var pageSize = skip + limit;\n    if (limit !== -1) {\n      tableQuery.Limit = pageSize;\n    }\n\n    async.doWhilst(function (end) {\n      if (exclusiveStartKey) tableQuery.ExclusiveStartKey = exclusiveStartKey;\n\n      if (tableQuery.KeyConditionExpression) {\n        client.query(tableQuery, function (err, results) {\n          if (err) {\n            error(\"getEvents query error: \" + err);\n            return end(err);\n          }\n          exclusiveStartKey = results.LastEvaluatedKey || null;\n          entities = entities.concat(results.Items);\n          end(null);\n        });\n      } else {\n        // no great 2ndary index possibilities here - avoid calling getItems w/o aggregateId\n        client.scan(tableQuery, function (err, results) {\n          if (err) {\n            error(\"getEvents scan error: \" + err);\n            return end(err);\n          }\n\n          exclusiveStartKey = results.LastEvaluatedKey || null;\n          entities = entities.concat(results.Items);\n          end(null);\n        })\n      }\n    }, function () {\n      return (entities.length < pageSize || pageSize == -1) ? exclusiveStartKey !== null : false;\n    }, function (err) {\n      if (err) {\n        error(\"getEvents error: \" + err);\n        return callback(err);\n      }\n\n      entities = entities.map(MapStoredEventToEvent);\n\n      entities = _.sortBy(entities, function (e) {\n        return [new Date(e.commitStamp).getTime(), e.streamRevision];\n      });\n\n      if (limit === -1) {\n        entities = entities.slice(skip);\n      } else {\n        entities = entities.slice(skip, skip + limit);\n      }\n\n      callback(null, entities);\n    });\n  },\n\n  getEventsSince: function (date, skip, limit, callback) {\n    var self = this;\n    var client = new aws.DynamoDB.DocumentClient(self.options.endpointConf);\n    var exclusiveStartKey = null;\n    var entities = [];\n\n    var tableQuery = {\n      TableName: self.options.eventsTableName,\n      FilterExpression: \"commitStamp >= :date\",\n      ExpressionAttributeValues: { \":date\": date.getTime() }\n    };\n\n    var pageSize = skip + limit;\n    if (limit !== -1) {\n      tableQuery.Limit = pageSize;\n    }\n\n    async.doWhilst(function (end) {\n      if (exclusiveStartKey) tableQuery.ExclusiveStartKey = exclusiveStartKey;\n\n      // scan is just really inefficient but if you need to do it often a query on a 2ndary IDX *might* help\n      client.scan(tableQuery, function (err, results) {\n        if (err) {\n          error(\"getEventsSince scan error: \" + err);\n          return end(err);\n        }\n\n        exclusiveStartKey = results.LastEvaluatedKey || null;\n        entities = entities.concat(results.Items);\n        end(null);\n      });\n    }, function () {\n      return (entities.length < pageSize || pageSize == -1) ? exclusiveStartKey !== null : false;\n    }, function (err) {\n      if (err) {\n        error(\"getEventsSince error: \" + err);\n        return callback(err);\n      }\n\n      entities = entities.map(MapStoredEventToEvent);\n\n      entities = _.sortBy(entities, function (e) {\n        return e.commitStamp.getTime();\n      });\n\n      if (limit === -1) {\n        entities = entities.slice(skip);\n      } else {\n        entities = entities.slice(skip, pageSize);\n      }\n\n      callback(null, entities);\n    });\n  },\n\n  getEventsByRevision: function (query, revMin, revMax, callback) {\n\n    var self = this;\n    var client = new aws.DynamoDB.DocumentClient(self.options.endpointConf);\n    var exclusiveStartKey = null;\n    var entities = [];\n\n    if (!query.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      error(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var tableQuery = {\n      TableName: self.options.eventsTableName,\n      KeyConditionExpression: \"aggregateId = :a\",\n      FilterExpression: \"streamRevision >= :rmin\",\n      ExpressionAttributeValues: {\n        \":a\": query.aggregateId,\n        \":rmin\": revMin\n      }\n    };\n\n    if (revMax !== -1) {\n      tableQuery.FilterExpression = \"streamRevision BETWEEN :rmin AND :rmax\";\n      tableQuery.ExpressionAttributeValues[\":rmax\"] = revMax;\n    }\n\n    if (query && query.aggregate) {\n      tableQuery.FilterExpression += \" AND #name = :name\";\n      tableQuery.ExpressionAttributeValues[\":name\"] = query.aggregate;\n      tableQuery.ExpressionAttributeNames = { \"#name\": \"aggregate\" };\n    }\n\n    if (query && query.context) {\n      tableQuery.FilterExpression += \" AND context = :ctx\";\n      tableQuery.ExpressionAttributeValues[\":ctx\"] = query.context;\n    }\n\n    async.doWhilst(function (end) {\n      if (exclusiveStartKey) tableQuery.ExclusiveStartKey = exclusiveStartKey;\n\n      client.query(tableQuery, function (err, results) {\n        if (err) {\n          error(\"getEventsByRevision query error: \" + err);\n          return end(err);\n        }\n        exclusiveStartKey = results.LastEvaluatedKey || null;\n        entities = entities.concat(results.Items);\n        end(null);\n      });\n    }, function () {\n      return exclusiveStartKey !== null;\n    }, function (err) {\n      if (err) {\n        error(\"getEventsByRevision error: \" + err);\n        return callback(err);\n      }\n\n      entities = entities.map(MapStoredEventToEvent);\n\n      entities = _.sortBy(entities, function (e) {\n        return new Date(e.commitStamp).getTime();\n      });\n\n      callback(null, entities);\n    });\n  },\n\n  getUndispatchedEvents: function (query, callback) {\n    var self = this;\n    var client = new aws.DynamoDB.DocumentClient(self.options.endpointConf);\n    var exclusiveStartKey = null;\n    var entities = [];\n\n    if (!self.options.useUndispatchedEventsTable) return entities;\n\n    // TODO: use DynamoDB Streams instead\n    var tableQuery = {\n      TableName: self.options.undispatchedEventsTableName\n    };\n\n    if (query && query.aggregateId) {\n      tableQuery.ExpressionAttributeValues = { \":a\": query.aggregateId };\n      tableQuery.FilterExpression = \"aggregateId = :a\";\n    }\n\n    if (query && query.context) {\n      if (tableQuery.FilterExpression && tableQuery.FilterExpression.length !== 0) {\n        tableQuery.ExpressionAttributeValues[\":ctx\"] = query.context;\n        tableQuery.FilterExpression += \" and context = :ctx\";\n      } else {\n        tableQuery.ExpressionAttributeValues = { \":ctx\": query.context };\n        tableQuery.FilterExpression = \"context = :ctx\";\n      }\n    }\n\n    if (query && query.aggregate) {\n      tableQuery.ExpressionAttributeNames = { \"#name\": \"aggregate\" };\n      if (tableQuery.FilterExpression && tableQuery.FilterExpression.length !== 0) {\n        tableQuery.ExpressionAttributeValues[\":name\"] = query.aggregate;\n        tableQuery.FilterExpression += \" AND #name = :name\";\n      } else {\n        tableQuery.ExpressionAttributeValues = { \":name\": query.aggregate };\n        tableQuery.FilterExpression = \"#name = :name\";\n      }\n    }\n\n    async.doWhilst(function (end) {\n      if (exclusiveStartKey) tableQuery.ExclusiveStartKey = exclusiveStartKey;\n\n      client.scan(tableQuery, function (err, results) {\n        if (err) {\n          error(\"getUndispatchedEvents scan error: \" + err);\n          return end(err);\n        }\n\n        exclusiveStartKey = results.LastEvaluatedKey || null;\n        entities = entities.concat(results.Items);\n        end(null);\n      });\n    }, function () {\n      return exclusiveStartKey !== null;\n    }, function (err) {\n      if (err) {\n        error(\"getUndispatchedEvents error: \" + err);\n        return callback(err);\n      }\n\n      entities = entities.map(MapStoredEventToEvent);\n\n      entities = _.sortBy(entities, [function (e) {\n        return new Date(e.commitStamp).getTime();\n      }, 'id']);\n\n      callback(null, entities);\n    });\n  },\n\n  getLastEvent: function (query, callback) {\n\n    var self = this;\n    var client = new aws.DynamoDB.DocumentClient(self.options.endpointConf);\n    var exclusiveStartKey = null;\n    var entities = [];\n\n    if (!query.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      error(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var tableQuery = {\n      TableName: self.options.eventsTableName,\n      KeyConditionExpression: \"aggregateId = :a\",\n      ExpressionAttributeValues: {\n        \":a\": query.aggregateId\n      }\n    };\n\n    async.doWhilst(function (end) {\n      if (exclusiveStartKey) tableQuery.ExclusiveStartKey = exclusiveStartKey;\n\n      client.query(tableQuery, function (err, results) {\n        if (err) {\n          error(\"getLastEvent query error: \" + err);\n          return end(err);\n        }\n        exclusiveStartKey = results.LastEvaluatedKey || null;\n        entities = entities.concat(results.Items);\n        end(null);\n      });\n    }, function () {\n      return exclusiveStartKey !== null;\n    }, function (err) {\n      if (err) {\n        error(\"getLastEvent error: \" + err);\n        return callback(err);\n      }\n\n      entities = entities.map(MapStoredEventToEvent);\n\n      entities = _.sortBy(entities, function (e) {\n        return [new Date(e.commitStamp).getTime(),\n          e.streamRevision,\n          e.commitSequence];\n      }).reverse();\n\n      callback(null, entities[0]);\n    });\n  },\n\n  setEventToDispatched: function (id, callback) {\n    var self = this;\n    var client = new aws.DynamoDB.DocumentClient(self.options.endpointConf);\n\n    if (!self.options.useUndispatchedEventsTable) return callback();\n\n    var objDescriptor = {\n      TableName: self.options.undispatchedEventsTableName,\n      Key: {\n        id: id\n      }\n    };\n\n    client.delete(objDescriptor, callback);\n  },\n\n  addSnapshot: function (snap, callback) {\n    var self = this;\n    var client = new aws.DynamoDB.DocumentClient(self.options.endpointConf);\n\n    if (!snap.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      error(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var snapshot = {\n      TableName: self.options.snapshotsTableName,\n      Item: new StoredSnapshot(snap),\n      ConditionExpression: \"attribute_not_exists(aggregateId) and attribute_not_exists(id)\"\n    }\n    client.put(snapshot, function (err, data) {\n      if (err) {\n        error(\"addSnapshot error: \" + err);\n        return callback(err);\n      }\n      callback(null, data);\n    });\n  },\n\n  getSnapshot: function (query, revMax, callback) {\n\n    var self = this;\n    var client = new aws.DynamoDB.DocumentClient(self.options.endpointConf);\n    var exclusiveStartKey = null;\n    var entities = [];\n\n    if (!query.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var tableQuery = {\n      TableName: self.options.snapshotsTableName,\n      KeyConditionExpression: \"aggregateId = :a\",\n      ExpressionAttributeValues: {\n        \":a\": query.aggregateId\n      }\n    };\n\n    if (query && query.aggregate) {\n      tableQuery.ExpressionAttributeNames = { \"#name\": \"aggregate\" };\n      tableQuery.ExpressionAttributeValues[\":name\"] = query.aggregate;\n      tableQuery.FilterExpression = \"#name = :name\";\n    }\n\n    if (query && query.context) {\n      tableQuery.ExpressionAttributeValues[\":ctx\"] = query.context;\n      if (tableQuery.FilterExpression && tableQuery.FilterExpression.length !== 0)\n        tableQuery.FilterExpression += \" AND context = :ctx\";\n      else\n        tableQuery.FilterExpression = \"context = :ctx\";\n    }\n\n    if (revMax != -1) {\n      if (tableQuery.FilterExpression && tableQuery.FilterExpression.length !== 0)\n        tableQuery.FilterExpression += \" AND revision <= :rmax\";\n      else\n        tableQuery.FilterExpression = \"revision <= :rmax\";\n      tableQuery.ExpressionAttributeValues[\":rmax\"] = revMax;\n    }\n\n    async.doWhilst(function (end) {\n      if (exclusiveStartKey) tableQuery.ExclusiveStartKey = exclusiveStartKey;\n\n      client.query(tableQuery, function (err, results) {\n        if (err) {\n          debug(\"getSnapshot query error: \" + err);\n          return end(err);\n        }\n        exclusiveStartKey = results.LastEvaluatedKey || null;\n        entities = entities.concat(results.Items);\n        end(null);\n      });\n    }, function () {\n      return exclusiveStartKey !== null;\n    }, function (err) {\n      if (err) {\n        error(\"getSnapshot error: \" + err);\n        return callback(err);\n      }\n\n      entities = entities.map(MapStoredSnapshotToSnapshot);\n\n      entities = _.sortBy(entities, function (e) {\n        return - new Date(e.commitStamp).getTime();\n      });\n\n      callback(null, entities[0]);\n    });\n  }\n});\n\nvar StoredEvent = function (event) {\n  debug(\"Converting event to StoredEvent: \" + JSON.stringify(event, null, 2));\n  this.aggregateId = event.aggregateId;\n  this.rowKey = new Date(event.commitStamp).toISOString() + \":\" + (event.context || \"\") + \":\" + (event.aggregate || \"\") + \":\" + event.streamRevision;\n  this.id = event.id;\n  this.context = event.context;\n  this.aggregate = event.aggregate;\n  this.streamRevision = event.streamRevision;\n  this.commitId = event.commitId;\n  this.commitSequence = event.commitSequence;\n  this.commitStamp = new Date(event.commitStamp).getTime();\n  this.header = event.header;\n  this.dispatched = event.dispatched || false;\n  this.payload = JSON.stringify(event.payload);\n  debug(\"Event converted to StoredEvent: \" + JSON.stringify(this, null, 2));\n};\n\nfunction MapStoredEventToEvent(storedEvent) {\n  var event = {\n    aggregateId: storedEvent.aggregateId,\n    id: storedEvent.id,\n    context: storedEvent.context,\n    aggregate: storedEvent.aggregate,\n    streamRevision: storedEvent.streamRevision,\n    commitId: storedEvent.commitId,\n    commitSequence: storedEvent.commitSequence,\n    commitStamp: new Date(storedEvent.commitStamp) || null,\n    header: storedEvent.header || null,\n    dispatched: storedEvent.dispatched,\n    payload: JSON.parse(storedEvent.payload) || null\n  };\n\n  return event;\n}\n\nvar StoredSnapshot = function (snapshot) {\n  this.id = snapshot.id;\n  this.aggregateId = snapshot.aggregateId;\n  this.aggregate = snapshot.aggregate || undefined;\n  this.context = snapshot.context || undefined;\n  this.revision = snapshot.revision;\n  this.version = snapshot.version;\n  this.commitStamp = new Date(snapshot.commitStamp).getTime();\n  this.data = JSON.stringify(snapshot.data);\n};\n\nfunction MapStoredSnapshotToSnapshot(storedSnapshot) {\n  var snapshot = {\n    id: storedSnapshot.id,\n    aggregateId: storedSnapshot.aggregateId,\n    aggregate: storedSnapshot.aggregate || undefined,\n    context: storedSnapshot.context || undefined,\n    revision: storedSnapshot.revision,\n    version: storedSnapshot.version,\n    commitStamp: new Date(storedSnapshot.commitStamp) || null,\n    data: JSON.parse(storedSnapshot.data) || null\n  };\n\n  return snapshot;\n}\n\nfunction EventsTableDefinition(opts) {\n  var def = {\n    TableName: opts.eventsTableName,\n    KeySchema: [\n      { AttributeName: \"aggregateId\", KeyType: \"HASH\" },\n      { AttributeName: \"rowKey\", KeyType: \"RANGE\" }\n    ],\n    AttributeDefinitions: [\n      { AttributeName: \"aggregateId\", AttributeType: \"S\" },\n      { AttributeName: \"rowKey\", AttributeType: \"S\" }\n    ],\n    ProvisionedThroughput: {\n      ReadCapacityUnits: opts.EventsReadCapacityUnits,\n      WriteCapacityUnits: opts.EventsWriteCapacityUnits\n    }\n  };\n\n  return def;\n}\n\nfunction SnapshotTableDefinition(opts) {\n  var def = {\n    TableName: opts.snapshotsTableName,\n    KeySchema: [\n      { AttributeName: \"aggregateId\", KeyType: \"HASH\" },\n      { AttributeName: \"id\", KeyType: \"RANGE\" }\n    ],\n    AttributeDefinitions: [\n      { AttributeName: \"aggregateId\", AttributeType: \"S\" },\n      { AttributeName: \"id\", AttributeType: \"S\" }\n    ],\n    ProvisionedThroughput: {\n      ReadCapacityUnits: opts.SnapshotReadCapacityUnits,\n      WriteCapacityUnits: opts.SnapshotWriteCapacityUnits\n    }\n  };\n\n  return def;\n}\n\nfunction UndispatchedEventsTableDefinition(opts) {\n  var def = {\n    TableName: opts.undispatchedEventsTableName,\n    KeySchema: [\n      { AttributeName: \"id\", KeyType: \"HASH\" }\n    ],\n    AttributeDefinitions: [\n      { AttributeName: \"id\", AttributeType: \"S\" }\n    ],\n    ProvisionedThroughput: {\n      ReadCapacityUnits: opts.UndispatchedEventsReadCapacityUnits,\n      WriteCapacityUnits: opts.UndispatchedEventsWriteCapacityUnits\n    }\n  };\n\n  return def;\n}\n\nvar createTableIfNotExists = function (client, params, callback) {\n  var exists = function (p, cbExists) {\n    client.describeTable({ TableName: p.TableName }, function (err, data) {\n      if (err) {\n        if (err.code === \"ResourceNotFoundException\") {\n          debug(\"Table \" + p.TableName + \" already exists: \" + JSON.stringify(p, null, 2));\n          cbExists(null, { exists: false, definition: p });\n        } else {\n          error(\"Table \" + p.TableName + \" doesn't exist yet but describeTable: \" + JSON.stringify(err, null, 2));\n          cbExists(err);\n        }\n      } else {\n        debug(\"Table \" + p.TableName + \" already exists.\");\n        cbExists(null, { exists: true, description: data });\n      }\n    });\n  };\n\n  var create = function (r, cbCreate) {\n    if (!r.exists) {\n      debug(\"Creating \" + r.definition.TableName);\n      client.createTable(r.definition, function (err, data) {\n        if (err) {\n          error(\"Error while creating \" + r.definition.TableName + \": \" + JSON.stringify(err, null, 2));\n          cbCreate(err);\n        } else {\n          debug(data.TableDescription.TableName + \"created. Waiting for activiation.\");\n          cbCreate(null, { Table: { TableName: data.TableDescription.TableName, TableStatus: data.TableDescription.TableStatus } });\n        }\n      });\n    } else {\n      cbCreate(null, r.description);\n    }\n  };\n\n  var active = function (d, cbActive) {\n    var status = d.Table.TableStatus;\n    async.until(\n      function () { return status === \"ACTIVE\" },\n      function (cbUntil) {\n        debug(\"checking \" + d.Table.TableName + \" status.\");\n        client.describeTable({ TableName: d.Table.TableName }, function (err, data) {\n          if (err) {\n            error(\"There was an error checking \" + d.Table.TableName + \" status: \" + JSON.stringify(err, null, 2));\n            cbUntil(err);\n          } else {\n            status = data.Table.TableStatus;\n            setTimeout(cbUntil(null, data), 1000);\n          }\n        });\n      },\n      function (err, r) {\n        if (err) {\n          error(\"connect create table error: \" + err);\n          return cbActive(err);\n        }\n        debug(\"Table \" + d.Table.TableName + \" is active.\");\n        cbActive(null, r);\n      });\n  };\n\n  async.compose(active, create, exists)(params, function (err, result) {\n    if (err) callback(err);\n    else callback(null, result);\n  });\n};\n\nvar deleteTableIfExists = function (client, tableName, callback) {\n  var exists = function (name, cbExists) {\n    client.describeTable({ TableName: name }, function (err, data) {\n      if (err) {\n        if (err.code === \"ResourceNotFoundException\") {\n          cbExists(null, { exists: false, definition: { TableName: name } });\n        } else {\n          error(\"deleteTableIfExists - describeTable error: \" + JSON.stringify(err, null, 2));\n          cbExists(err);\n        }\n      } else {\n        cbExists(null, { exists: true, description: { TableName: data.Table.TableName } });\n      }\n    });\n  };\n\n  var deleteTable = function (r, cbDelete) {\n    if (r.exists) {\n      client.deleteTable(r.description, function (err, data) {\n        if (err) {\n          error(\"Error deleting '\" + r.description.TableName + \"': \" + JSON.stringify(err, null, 2));\n          cbDelete(err);\n        } else {\n          cbDelete(null, { Table: { TableName: data.TableDescription.TableName, TableStatus: data.TableDescription.TableStatus } });\n        }\n      });\n    } else {\n      cbDelete(null, r.description);\n    }\n  };\n\n  var active = function (d, cbActive) {\n    var status = d.Table.TableStatus;\n    async.until(\n      function () { return status === \"DELETED\" },\n      function (cbUntil) {\n        client.describeTable({ TableName: d.Table.TableName }, function (err, data) {\n          if (err) {\n            if (err.code === \"ResourceNotFoundException\") {\n              status = \"DELETED\";\n              return cbUntil(null, d.Table.TableName);\n            }\n            error(\"Error calling describeTable for '\" + d.Table.TableName + \"'\");\n            cbUntil(err);\n          } else {\n            setTimeout(cbUntil(null, data), 1000);\n          }\n        });\n      },\n      function (err, r) {\n        if (err) {\n          error(\"connect delete table error: \" + err);\n          return cbActive(err);\n        }\n        cbActive(null, r);\n      });\n  };\n\n  async.compose(active, deleteTable, exists)(tableName, function (err, result) {\n    if (err) callback(err);\n    else callback(null, result);\n  });\n};\n\nvar clearEventTables = function (opts, documentClient, cleared) {\n  var exclusiveStartKey = null;\n  var retryCount = 0;\n\n  debug(\"clearning events tables\");\n  var maps = [\n    {\n      TableName: opts.eventsTableName,\n      keyMap: function (n) {\n        return { DeleteRequest: { Key: { aggregateId: n.aggregateId, rowKey: n.rowKey } } };\n      }\n    },\n  ];\n\n  if (opts.useUndispatchedEventsTable) {\n    maps.push({\n      TableName: opts.undispatchedEventsTableName,\n      keyMap: function (n) {\n        return { DeleteRequest: { Key: { id: n.id } } };\n      }\n    });\n  }\n\n  var read = function (task, callback) {\n    documentClient.scan(task.params, function (err, page) {\n      if (err) {\n        error(\"clearEventTables scan error: \" + err);\n        return callback(err);\n      }\n\n      retryCount = 0;\n      exclusiveStartKey = page.LastEvaluatedKey || null;\n\n      if (page.Count == 0) {\n        return callback(null, {});\n      }\n\n      var batch = {\n        RequestItems: {},\n        ReturnConsumedCapacity: \"INDEXES\",\n        ReturnItemCollectionMetrics: \"SIZE\"\n      };\n\n      _.forEach(task.maps, function (m) {\n        var keys = _.map(page.Items, m.keyMap);\n        batch.RequestItems[m.TableName] = keys;\n      });\n\n      callback(null, batch);\n    });\n  };\n\n  var write = function (batch, callback) {\n    if (batch && batch.RequestItems) {\n      debug(\"Clear: calling batchWrite: \" + JSON.stringify(batch, null, 2));\n      documentClient.batchWrite(batch, function (err, result) {\n        if (err) {\n          error(\"Clear (batchWrite) error): \" + JSON.stringify(batch, null, 2));\n          return callback(err);\n        }\n\n        if (Object.keys(result.UnprocessedItems).length !== 0) {\n          retryCount++;\n          var retry = {\n            RequestItems: result.UnprocessedItems,\n            ReturnConsumedCapacity: \"INDEXES\",\n            ReturnItemCollectionMetrics: \"SIZE\"\n          };\n          debug(\"Clear batchWrite throttling: \" + JSON.stringify(retry, null, 2));\n          // retry with exponential backoff\n          var delay = retryCount > 0 ? (50 * Math.pow(2, retryCount - 1)) : 0;\n          setTimeout(write(retry, callback), delay);\n          return;\n        }\n\n        callback(null, result);\n      });\n    } else {\n      callback(null);\n    }\n  };\n\n  var tasks = [\n    {\n      params: {\n        TableName: opts.eventsTableName,\n        ProjectionExpression: \"aggregateId,rowKey,id\",\n        Limit: 25, // max 25 per batchWrite call\n        ConsistentRead: false,\n        ReturnConsumedCapacity: \"TOTAL\"\n      },\n      maps: [maps[0]]\n    }\n  ];\n\n  if (opts.useUndispatchedEventsTable) {\n    tasks.splice(0, 0, {\n      params: {\n        TableName: opts.undispatchedEventsTableName,\n        ProjectionExpression: \"aggregateId,rowKey,id\",\n        Limit: 12, // max 25 per batchWrite call divided by 2 tables\n        ConsistentRead: false,\n        ReturnConsumedCapacity: \"TOTAL\"\n      },\n      maps: maps\n    });\n  }\n\n  async.eachSeries(tasks, function (t, afterEach) {\n\n    async.doWhilst(function (next) {\n\n      if (exclusiveStartKey)\n        t.params.ExclusiveStartKey = exclusiveStartKey;\n\n      async.seq(read, write)(t, function (err, result) {\n        if (err) next(err);\n        else next(null, result);\n      });\n\n    }, function () {\n      return exclusiveStartKey !== null;\n    }, function (err, r) {\n      if (err) {\n        error(\"clearEvents error: \" + err);\n        return afterEach(err);\n      }\n      return afterEach();\n    });\n\n  }, function (err) {\n    if (err) {\n      error(\"Error while clearning events tables: \" + JSON.stringify(err, null, 2));\n      return cleared(err);\n    }\n    debug(\"Events tables successfully cleared.\");\n    return cleared();\n  });\n\n};\n\nvar clearSnapshotsTable = function (opts, documentClient, cleared) {\n  var exclusiveStartKey = null;\n\n  var query = {\n    TableName: opts.snapshotsTableName,\n    ProjectionExpression: \"aggregateId,id\",\n    Limit: 25, // max 25 per batchWrite call\n    ConsistentRead: false,\n    ReturnConsumedCapacity: \"TOTAL\"\n  };\n\n  async.doWhilst(function (end) {\n    if (exclusiveStartKey)\n      query.ExclusiveStartKey = exclusiveStartKey;\n\n    documentClient.scan(query, function (err, page) {\n      if (err) {\n        error(\"clearSnapshotsTable scan error: \" + err);\n        return end(err);\n      }\n\n      exclusiveStartKey = page.LastEvaluatedKey || null;\n\n      if (page.Count === 0) {\n        return end(err);\n      }\n\n      var keys = _.map(page.Items, function (n) {\n        return { DeleteRequest: { Key: n } }\n      });\n\n      var batch = {\n        RequestItems: {},\n        ReturnConsumedCapacity: \"TOTAL\",\n        ReturnItemCollectionMetrics: \"SIZE\"\n      };\n      batch.RequestItems[opts.snapshotsTableName] = keys;\n\n      documentClient.batchWrite(batch, function (err2, data) {\n        error(\"clearSnapshotsTable batchWrite error: \" + err2);\n        return end(err2);\n      });\n    });\n  }, function () {\n    return exclusiveStartKey !== null;\n  }, function (err, r) {\n    if (err) {\n      error(\"clearSnapshotsTable error: \" + err);\n      return cleared(error);\n    }\n    return cleared(null);;\n  });\n};\n\nvar deleteAllTempTables = function (client, opts, done) {\n  var exclusiveStartTableName = null;\n\n  var read = function (query, callback) {\n    if (exclusiveStartTableName)\n      query.ExclusiveStartTableName = exclusiveStartTableName;\n\n    client.listTables(query, function (err, list) {\n      if (err) {\n        error(\"deleteAllTempTables listTables error: \" + err);\n        return callback(err);\n      }\n\n      exclusiveStartTableName = list.LastEvaluatedTableName || null;\n      var targets = _.filter(list.TableNames, function (t) {\n        return t === opts.eventsTableName ||\n          t === opts.undispatchedEventsTableName ||\n          t === opts.snapshotsTableName;\n      });\n\n      callback(null, targets);\n    });\n  };\n\n  var drop = function (targets, callback) {\n    async.each(targets, function (t, deleted) {\n      deleteTableIfExists(client, t, deleted);\n    }, function (err) {\n      if (err) {\n        error(\"deleteAllTempTables drop error: \" + err);\n        return callback(err);\n      }\n      return callback(null);\n    });\n  };\n\n  async.doWhilst(function (next) {\n    async.compose(drop, read)({}, function (err, result) {\n      if (err) next(err);\n      else next(null, result);\n    });\n  }, function () {\n    return exclusiveStartTableName !== null;\n  }, function (err, result) {\n    if (err) {\n      error(\"deleteAllTempTables error: \" + err);\n      return done(err);\n    }\n    done(null, result);\n  });\n};\n\nmodule.exports = DynamoDB;\n","/home/travis/build/npmtest/node-npmtest-eventstore/node_modules/eventstore/lib/databases/elasticsearch.js":"'use strict';\n\nvar util = require('util'),\n  Store = require('../base'),\n  _ = require('lodash'),\n  uuid = require('uuid'),\n  elasticsearch = Store.use('elasticsearch'),\n  elasticsearchVersion = Store.use('elasticsearch/package.json').version,\n  debug = require('debug')('eventstore:store:elasticsearch');\n\nfunction Elastic(options) {\n  options = options || {};\n\n  Store.call(this, options);\n\n  var defaults = {\n    host: 'localhost:9200',\n    indexName: 'eventstore',\n    eventsTypeName: 'events',\n    snapshotsTypeName: 'snapshots',\n    log: 'warning',\n    maxSearchResults: 10000\n  };\n\n  _.defaults(options, defaults);\n\n  var defaultOpt = {\n    auto_reconnect: false,\n    ssl: false\n  };\n\n  options.options = options.options || {};\n\n  _.defaults(options.options, defaultOpt);\n\n  this.options = options;\n}\n\nutil.inherits(Elastic, Store);\n\n_.extend(Elastic.prototype, {\n\n  connect: function (callback) {\n    var options = this.options;\n    if (options.client) {\n  \t\tthis.client = options.client;\n  \t} else {\n  \t\tthis.client = new elasticsearch.Client({host: options.host, log: options.log});\n  \t}\n    this.emit('connect');\n    if (callback) callback(null);\n  },\n\n  disconnect: function (callback) {\n    this.client = null;\n    this.emit('disconnect');\n    if (callback) callback(null);\n  },\n\n  clear: function (callback) {\n    var self = this;\n    var options = this.options;\n    this.client.indices.exists({index: options.indexName}, function (err, result) {\n      if (result){\n        self.client.indices.delete({index: options.indexName}, function (err) {\n          if (callback) callback(err);\n        });\n      } else {\n        if (callback) callback(err);\n      }\n    });\n  },\n\n  getNewId: function(callback) {\n    callback(null, uuid.v4());\n  },\n\n  addEvents: function (events, callback) {\n    var options = this.options;\n\n    if (events.length === 0) {\n      if (callback) callback(null);\n      return;\n    }\n\n    var noAggId = false;\n    var bulkMap = [];\n\n    _.forEach(events, function (evt) {\n      if (!evt.aggregateId) {\n        noAggId = true;\n      }\n      evt.dispatched = false;\n      bulkMap.push({create: {_index: options.indexName, _type: options.eventsTypeName, _id: evt.id}});\n      bulkMap.push(evt);\n    });\n\n    if (noAggId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n    this.client.bulk({body: bulkMap, refresh: true}, function(error, response){\n      if (callback) callback(error);\n    });\n  },\n\n  _buildQuery: function(type, find, sort, skip, limit) {\n    var query = {\n      index: this.options.indexName,\n      type: type,\n      defaultOperator: 'AND',\n      from: (!skip ? 0 : skip),\n      size: (!limit || limit === -1 ? this.options.maxSearchResults - (skip || 0) : limit)\n    };\n    if (find && find.length) query.q = find.join(' AND ');\n    if (sort && sort.length) query.sort = sort;\n    return query;\n  },\n\n  _search: function (type, find, sort, skip, limit, callback) {\n    var options = this.options;\n    var searchOptions = this._buildQuery(type, find, sort, skip, limit);\n\n    this.client.search(searchOptions, function (error, response) {\n      var dataList = [];\n      if (response) {\n        if (response.error) {\n          var error = new Error(response.error.root_cause ? response.error.root_cause[0].reason : response.error);\n          debug(error.message);\n          return callback(error);\n        }\n        if (response.hits && response.hits.hits && response.hits.hits.length) {\n          if (response.hits.hits.length >= options.maxSearchResults){\n            var errMsg = 'reached maximum of ' + options.maxSearchResults + ' search results!';\n            debug(errMsg);\n            if (callback) callback(new Error(errMsg));\n            return;\n          }\n          dataList = response.hits.hits.map(function (data) {\n            data._source.commitStamp = new Date(data._source.commitStamp);\n            return data._source;\n          });\n        }\n      }\n\n      callback(null, dataList);\n    });\n  },\n\n  _searchEvents: function(find, skip, limit, callback) {\n    this._search(this.options.eventsTypeName, find, ['commitStamp:asc', 'streamRevision:asc', 'commitSequence:asc'], skip, limit, callback);\n  },\n\n  _searchSnapshots: function(find, skip, limit, callback) {\n    this._search(this.options.snapshotsTypeName, find, ['revision:desc', 'version:desc', 'commitStamp:desc'], skip, limit, callback);\n  },\n\n  getEvents: function (query, skip, limit, callback) {\n    var findStatement = [];\n    if (query.aggregate) findStatement.push('aggregate:' + query.aggregate);\n    if (query.context) findStatement.push('context:' + query.context);\n    if (query.aggregateId) findStatement.push('aggregateId:' + query.aggregateId);\n\n    this._searchEvents(findStatement, skip, limit, callback);\n  },\n\n  getLastEvent: function (query, callback) {\n    if (!query.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var findStatement = [ 'aggregateId:' + query.aggregateId ];\n    if (query.aggregate) findStatement.push('aggregate:' + query.aggregate);\n    if (query.context) findStatement.push('context:' + query.context);\n\n    this._search(this.options.eventsTypeName, findStatement, ['commitStamp:desc', 'streamRevision:desc', 'commitSequence:desc'], 0, 1,  function(error, response){\n      var event = response && response.length ? response[0] : null;\n      if (callback) callback(null, event);\n    });\n  },\n\n  getEventsSince: function (date, skip, limit, callback) {\n    var findStatement = ['commitStamp:[' + date.toJSON() + ' TO *]'];\n\n    this._searchEvents(findStatement, skip, limit, callback);\n  },\n\n  getEventsByRevision: function (query, revMin, revMax, callback) {\n    if (!query.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var findStatement = [];\n    if (revMax === -1) {\n      findStatement.push('streamRevision:[' + revMin + ' TO *]');\n    } else {\n      findStatement.push('streamRevision:[' + revMin + ' TO ' + revMax + '}');\n    }\n    findStatement.push('aggregateId:' + query.aggregateId);\n    if (query.aggregate) findStatement.push('aggregate:' + query.aggregate);\n    if (query.context) findStatement.push('context:' + query.context);\n\n    this._searchEvents(findStatement, null, null, callback);\n  },\n\n  getUndispatchedEvents: function (query, callback) {\n    var findStatement = ['dispatched:false'];\n    if (query && query.aggregate) findStatement.push('aggregate:' + query.aggregate);\n    if (query && query.context) findStatement.push('context:' + query.context);\n    if (query && query.aggregateId) findStatement.push('aggregateId:' + query.aggregateId);\n\n    this._searchEvents(findStatement, null, null, callback);\n  },\n\n  setEventToDispatched: function (id, callback) {\n    this.client.update({\n      index: this.options.indexName,\n      type: this.options.eventsTypeName,\n      id: id,\n      body: {\n        doc: {\n          dispatched: true\n        }\n      },\n      refresh: true\n    }, function (error, response) {\n      if (callback) callback(error);\n    });\n  },\n\n  addSnapshot: function(snap, callback) {\n    if (!snap.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    this.client.create({\n      index: this.options.indexName,\n      type: this.options.snapshotsTypeName,\n      id: snap.id,\n      body: snap,\n      refresh: true\n    }, function (error, response) {\n      if (callback) callback(error);\n    });\n  },\n\n  cleanSnapshots: function (query, callback) {\n    if (!query.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var findStatement = ['aggregateId:' + query.aggregateId];\n\n    if (query.aggregate) findStatement.push('aggregate:' + query.aggregate);\n    if (query.context) findStatement.push('context:' + query.context);\n\n    var self = this;\n    this._searchSnapshots(findStatement, this.options.maxSnapshotsCount, -1, function (error, response) {\n      if (error) {\n        return callback(error);\n      }\n      self._bulkDelete(self.options.snapshotsTypeName, response, callback);\n    });\n  },\n\n  _bulkDelete: function (type, items, callback) {\n    var index = this.options.indexName;\n    var deleteStatements = items.map(function(item) {\n      return {\n        delete: {\n          _index: index,\n          _type: type,\n          _id: item.id\n        }\n      };\n    });\n    this.client.bulk({\n      body: deleteStatements\n    }, function(error, response) {\n      callback(error, response ? response.items.length : 0);\n    });\n  },\n\n  getSnapshot: function (query, revMax, callback) {\n    if (!query.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var findStatement = ['aggregateId:' + query.aggregateId];\n\n    if (query.aggregate) findStatement.push('aggregate:' + query.aggregate);\n    if (query.context) findStatement.push('context:' + query.context);\n    if (revMax > -1) findStatement.push('revision:[* TO ' + revMax + ']');\n\n    this._searchSnapshots(findStatement, 0, 1, function(error, response){\n      var snap = response && response.length ? response[0] : null;\n      if (callback) callback(null, snap);\n    });\n  }\n\n});\n\nmodule.exports = Elastic;\n","/home/travis/build/npmtest/node-npmtest-eventstore/node_modules/eventstore/lib/databases/inmemory.js":"'use strict';\n\nvar util = require('util'),\n  Store = require('../base'),\n  _ = require('lodash'),\n  jsondate = require('jsondate'),\n  debug = require('debug')('eventstore:store:inmemory');\n\nfunction InMemory(options) {\n  Store.call(this, options);\n  this.store = {};\n  this.snapshots = {};\n  this.undispatchedEvents = { _direct: {} };\n  this.options = options;\n}\n\nutil.inherits(InMemory, Store);\n\nfunction deepFind (obj, pattern) {\n  var found;\n\n  if (pattern) {\n    var parts = pattern.split('.');\n\n    found = obj;\n    for (var i in parts) {\n      found = found[parts[i]];\n      if (_.isArray(found)) {\n        found = _.filter(found, function (item) {\n          var deepFound = deepFind(item, parts.slice(i + 1).join('.'));\n          return !!deepFound;\n\n        });\n        break;\n      }\n\n      if (!found) {\n        break;\n      }\n    }\n  }\n\n  return found;\n}\n\n_.extend(InMemory.prototype, {\n\n  connect: function (callback) {\n    this.emit('connect');\n    if (callback) callback(null, this);\n  },\n\n  disconnect: function (callback) {\n    this.emit('disconnect');\n    if (callback) callback(null);\n  },\n\n  clear: function (callback) {\n    this.store = {};\n    this.snapshots = {};\n    this.undispatchedEvents = { _direct: {} };\n    if (callback) callback(null);\n  },\n\n  addEvents: function (events, callback) {\n    if (!events || events.length === 0) {\n      callback(null);\n      return;\n    }\n\n    var found = _.find(events, function(evt) {\n      return !evt.aggregateId;\n    });\n\n    if (found) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var aggregateId = events[0].aggregateId;\n    var aggregate = events[0].aggregate || '_general';\n    var context = events[0].context || '_general';\n\n    this.store[context] = this.store[context] || {};\n    this.store[context][aggregate] = this.store[context][aggregate] || {};\n    this.store[context][aggregate][aggregateId] = this.store[context][aggregate][aggregateId] || [];\n    this.store[context][aggregate][aggregateId] = this.store[context][aggregate][aggregateId].concat(events);\n\n    this.undispatchedEvents[context] = this.undispatchedEvents[context] || {};\n    this.undispatchedEvents[context][aggregate] = this.undispatchedEvents[context][aggregate] || {};\n    this.undispatchedEvents[context][aggregate][aggregateId] = this.undispatchedEvents[context][aggregate][aggregateId] || [];\n    this.undispatchedEvents[context][aggregate][aggregateId] = this.undispatchedEvents[context][aggregate][aggregateId].concat(events);\n\n    var self = this;\n    _.forEach(events, function(evt) {\n      self.undispatchedEvents._direct[evt.id] = evt;\n    });\n\n    callback(null);\n  },\n\n  getEvents: function (query, skip, limit, callback) {\n    var res = [];\n    for (var s in this.store) {\n      for (var ss in this.store[s]) {\n        for (var sss in this.store[s][ss]) {\n          res = res.concat(this.store[s][ss][sss]);\n        }\n      }\n    }\n\n    res = _.sortBy(res, function (e) {\n      return e.commitStamp.getTime();\n    });\n\n    if (!_.isEmpty(query)) {\n      res = _.filter(res, function(e) {\n        var keys = _.keys(query);\n        var values = _.values(query);\n        var found = false;\n        for (var i in keys) {\n          var key = keys[i];\n          var deepFound = deepFind(e, key);\n          if (_.isArray(deepFound) && deepFound.length > 0) {\n            found = true;\n          } else if (deepFound === values[i]) {\n            found = true;\n          } else {\n            found = false;\n            break;\n          }\n        }\n        return found;\n      });\n    }\n\n    if (limit === -1) {\n      return callback(null, _.cloneDeep(res.slice(skip)));\n    }\n\n    if (res.length <= skip) {\n      return callback(null, []);\n    }\n\n    callback(null, _.cloneDeep(res.slice(skip, skip + limit)));\n  },\n\n  getEventsSince: function (date, skip, limit, callback) {\n    var res = [];\n    for (var s in this.store) {\n      for (var ss in this.store[s]) {\n        for (var sss in this.store[s][ss]) {\n          res = res.concat(this.store[s][ss][sss]);\n        }\n      }\n    }\n\n    res = _.sortBy(res, function (e) {\n      return e.commitStamp.getTime();\n    });\n\n    res = _.filter(res, function(e) {\n      return e.commitStamp.getTime() >= date.getTime();\n    });\n\n    if (limit === -1) {\n      return callback(null, _.cloneDeep(res.slice(skip)));\n    }\n\n    if (res.length <= skip) {\n      return callback(null, []);\n    }\n\n    callback(null, _.cloneDeep(res.slice(skip, skip + limit)));\n  },\n\n  getEventsByRevision: function (query, revMin, revMax, callback) {\n    var res = [];\n\n    if (!query.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    if (query.context && query.aggregate) {\n      this.store[query.context] = this.store[query.context] || {};\n      this.store[query.context][query.aggregate] = this.store[query.context][query.aggregate] || {};\n\n      if (!this.store[query.context][query.aggregate][query.aggregateId]) {\n        return callback(null, _.cloneDeep(res));\n      }\n      else {\n        if (revMax === -1) {\n          res = res.concat(this.store[query.context][query.aggregate][query.aggregateId].slice(revMin));\n        }\n        else {\n          res = res.concat(this.store[query.context][query.aggregate][query.aggregateId].slice(revMin, revMax));\n        }\n      }\n      return callback(null, _.cloneDeep(res));\n    }\n\n    if (!query.context && query.aggregate) {\n      for (var s in this.store) {\n        var c = this.store[s];\n        if (c[query.aggregate] && c[query.aggregate][query.aggregateId]) {\n          if (revMax === -1) {\n            res = res.concat(c[query.aggregate][query.aggregateId].slice(revMin));\n          }\n          else {\n            res = res.concat(c[query.aggregate][query.aggregateId].slice(revMin, revMax));\n          }\n        }\n      }\n      return callback(null, _.cloneDeep(res));\n    }\n\n    if (query.context && !query.aggregate) {\n      var cc = this.store[query.context] || {};\n      for (var ss in cc) {\n        var a = cc[ss];\n        if (a[query.aggregateId]) {\n          if (revMax === -1) {\n            res = res.concat(a[query.aggregateId].slice(revMin));\n          }\n          else {\n            res = res.concat(a[query.aggregateId].slice(revMin, revMax));\n          }\n        }\n      }\n      return callback(null, _.cloneDeep(res));\n    }\n\n    if (!query.context && !query.aggregate) {\n      for (var sc in this.store) {\n        var cont = this.store[sc];\n        for (var sa in cont) {\n          var agg = cont[sa];\n          if (agg[query.aggregateId]) {\n            if (revMax === -1) {\n              res = res.concat(agg[query.aggregateId].slice(revMin));\n            }\n            else {\n              res = res.concat(agg[query.aggregateId].slice(revMin, revMax));\n            }\n          }\n        }\n      }\n      return callback(null, _.cloneDeep(res));\n    }\n  },\n\n  getLastEvent: function (query, callback) {\n    if (!query.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var res = [];\n    for (var s in this.store) {\n      for (var ss in this.store[s]) {\n        for (var sss in this.store[s][ss]) {\n          res = res.concat(this.store[s][ss][sss]);\n        }\n      }\n    }\n\n    res = _.sortBy(res, function (e) {\n      return e.commitStamp.getTime();\n    });\n\n    if (!_.isEmpty(query)) {\n      res = _.filter(res, function(e) {\n        var keys = _.keys(query);\n        var values = _.values(query);\n        var found = false;\n        for (var i in keys) {\n          var key = keys[i];\n          var deepFound = deepFind(e, key);\n          if (_.isArray(deepFound) && deepFound.length > 0) {\n            found = true;\n          } else if (deepFound === values[i]) {\n            found = true;\n          } else {\n            found = false;\n            break;\n          }\n        }\n        return found;\n      });\n    }\n\n    callback(null, res[res.length - 1]);\n  },\n\n  getUndispatchedEvents: function (query, callback) {\n    var res = [];\n    for (var s in this.undispatchedEvents) {\n      if (s === '_direct') continue;\n      for (var ss in this.undispatchedEvents[s]) {\n        for (var sss in this.undispatchedEvents[s][ss]) {\n          res = res.concat(this.undispatchedEvents[s][ss][sss]);\n        }\n      }\n    }\n\n    res = _.sortBy(res, function (e) {\n      return e.commitStamp.getTime();\n    });\n\n    if (!_.isEmpty(query)) {\n      res = _.filter(res, function(e) {\n        var keys = _.keys(query);\n        var values = _.values(query);\n        var found = false;\n        for (var i in keys) {\n          var key = keys[i];\n          var deepFound = deepFind(e, key);\n          if (_.isArray(deepFound) && deepFound.length > 0) {\n            found = true;\n          } else if (deepFound === values[i]) {\n            found = true;\n          } else {\n            found = false;\n            break;\n          }\n        }\n        return found;\n      });\n    }\n\n    callback(null, res);\n  },\n\n  setEventToDispatched: function (id, callback) {\n    var evt = this.undispatchedEvents._direct[id];\n    var aggregateId = evt.aggregateId;\n    var aggregate = evt.aggregate || '_general';\n    var context = evt.context || '_general';\n\n    this.undispatchedEvents[context][aggregate][aggregateId] = _.reject(this.undispatchedEvents[context][aggregate][aggregateId], evt);\n    delete this.undispatchedEvents._direct[id];\n    callback(null);\n  },\n\n  addSnapshot: function(snap, callback) {\n    var aggregateId = snap.aggregateId;\n    var aggregate = snap.aggregate || '_general';\n    var context = snap.context || '_general';\n\n    if (!snap.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    this.snapshots[context] = this.snapshots[context] || {};\n    this.snapshots[context][aggregate] = this.snapshots[context][aggregate] || {};\n    this.snapshots[context][aggregate][aggregateId] = this.snapshots[context][aggregate][aggregateId] || [];\n\n    this.snapshots[context][aggregate][aggregateId].push(snap);\n    callback(null);\n  },\n\n  getSnapshot: function (query, revMax, callback) {\n\n    if (!query.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var all = [];\n    for (var s in this.snapshots) {\n      for (var ss in this.snapshots[s]) {\n        for (var sss in this.snapshots[s][ss]) {\n          all = all.concat(this.snapshots[s][ss][sss]);\n        }\n      }\n    }\n\n//    all = _.sortBy(all, function (s) {\n//      return [(-s.revision), (-s.version)].join('_');\n//    });\n\n    all = _.sortBy(all, function (s) {\n      return (-s.commitStamp.getTime());\n    });\n\n    if (!_.isEmpty(query)) {\n      all = _.filter(all, function(a) {\n        var keys = _.keys(query);\n        var values = _.values(query);\n        var found = false;\n        for (var i in keys) {\n          var key = keys[i];\n          var deepFound = deepFind(a, key);\n          if (_.isArray(deepFound) && deepFound.length > 0) {\n            found = true;\n          } else if (deepFound === values[i]) {\n            found = true;\n          } else {\n            found = false;\n            break;\n          }\n        }\n        return found;\n      });\n    }\n\n    if (revMax === -1) {\n      return callback(null, all[0] ? jsondate.parse(JSON.stringify(all[0])) : null);\n    }\n    else {\n      for (var i = all.length - 1; i >= 0; i--) {\n        if (all[i].revision <= revMax) {\n          return callback(null, jsondate.parse(JSON.stringify(all[i])));\n        }\n      }\n    }\n    callback(null, null);\n  },\n\n  cleanSnapshots: function(query, callback) {\n    var aggregateId = query.aggregateId;\n    var aggregate = query.aggregate || '_general';\n    var context = query.context || '_general';\n\n    if (!aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var snapshots = this.snapshots[context][aggregate][aggregateId] || [];\n    var length = snapshots.length;\n    snapshots = snapshots.slice(-1 * this.options.maxSnapshotsCount);\n    this.snapshots[context][aggregate][aggregateId] = snapshots;\n\n    callback(null, length - snapshots.length);\n  }\n\n});\n\nmodule.exports = InMemory;\n","/home/travis/build/npmtest/node-npmtest-eventstore/node_modules/eventstore/lib/databases/mongodb.js":"'use strict';\n\nvar util = require('util'),\n  Store = require('../base'),\n  _ = require('lodash'),\n  async = require('async'),\n  mongo = Store.use('mongodb'),\n  mongoVersion = Store.use('mongodb/package.json').version,\n  isNew = mongoVersion.indexOf('1.') !== 0,\n  ObjectID = isNew ? mongo.ObjectID : mongo.BSONPure.ObjectID,\n  debug = require('debug')('eventstore:store:mongodb');\n\nfunction Mongo(options) {\n  options = options || {};\n\n  Store.call(this, options);\n\n  var defaults = {\n    host: 'localhost',\n    port: 27017,\n    dbName: 'eventstore',\n    eventsCollectionName: 'events',\n    snapshotsCollectionName: 'snapshots',\n    transactionsCollectionName: 'transactions'//,\n    // heartbeat: 60 * 1000\n  };\n\n  _.defaults(options, defaults);\n\n  var defaultOpt = {\n    ssl: false\n  };\n\n  options.options = options.options || {};\n\n  if (isNew) {\n    defaultOpt.autoReconnect = false;\n    _.defaults(options.options, defaultOpt);\n  } else {\n    defaultOpt.auto_reconnect = false;\n    _.defaults(options.options, defaultOpt);\n  }\n\n  this.options = options;\n}\n\nutil.inherits(Mongo, Store);\n\n_.extend(Mongo.prototype, {\n\n  connect: function (callback) {\n    var self = this;\n\n    var options = this.options;\n\n    var connectionUrl;\n\n    if (options.url) {\n      connectionUrl = options.url;\n    } else {\n      var members = options.servers\n        ? options.servers\n        : [{host: options.host, port: options.port}];\n\n      var memberString = _(members).map(function(m) { return m.host + ':' + m.port; });\n      var authString = options.username && options.password\n        ? options.username + ':' + options.password + '@'\n        : '';\n      var optionsString = options.authSource\n        ? '?authSource=' + options.authSource\n        : '';\n\n      connectionUrl = 'mongodb://' + authString + memberString + '/' + options.dbName + optionsString;\n    }\n\n    var client = new mongo.MongoClient();\n\n    client.connect(connectionUrl, options.options, function(err, db) {\n      if (err) {\n        debug(err);\n        if (callback) callback(err);\n        return;\n      }\n\n      self.db = db;\n\n      self.db.on('close', function() {\n        self.emit('disconnect');\n        self.stopHeartbeat();\n      });\n\n\n      function finish (err) {\n        if (err) {\n          debug(err);\n          if (callback) callback(err);\n          return;\n        }\n\n        self.events = self.db.collection(options.eventsCollectionName);\n        self.events.ensureIndex({ aggregateId: 1, streamRevision: 1 },\n          function (err) { if (err) { debug(err); } });\n        self.events.ensureIndex({ commitStamp: 1 },\n          function (err) { if (err) { debug(err); } });\n        self.events.ensureIndex({ dispatched: 1 }, { sparse: true },\n          function (err) { if (err) { debug(err); } });\n        self.events.ensureIndex({ commitStamp: 1, streamRevision: 1, commitSequence: 1 },\n          function (err) { if (err) { debug(err); } });\n\n        self.snapshots = self.db.collection(options.snapshotsCollectionName);\n        self.snapshots.ensureIndex({ aggregateId: 1, revision: -1 },\n          function (err) { if (err) { debug(err); } });\n\n        self.transactions = self.db.collection(options.transactionsCollectionName);\n        self.transactions.ensureIndex({ aggregateId: 1, 'events.streamRevision': 1 },\n          function (err) { if (err) { debug(err); } });\n\n        self.emit('connect');\n        if (self.options.heartbeat) {\n          self.startHeartbeat();\n        }\n        if (callback) callback(null, self);\n      }\n\n      finish();\n    });\n  },\n\n  stopHeartbeat: function () {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n      delete this.heartbeatInterval;\n    }\n  },\n\n  startHeartbeat: function () {\n    var self = this;\n\n    var gracePeriod = Math.round(this.options.heartbeat / 2);\n    this.heartbeatInterval = setInterval(function () {\n      var graceTimer = setTimeout(function () {\n        if (self.heartbeatInterval) {\n          console.error((new Error ('Heartbeat timeouted after ' + gracePeriod + 'ms (mongodb)')).stack);\n          self.disconnect();\n        }\n      }, gracePeriod);\n\n      self.db.command({ ping: 1 }, function (err) {\n        if (graceTimer) clearTimeout(graceTimer);\n        if (err) {\n          console.error(err.stack || err);\n          self.disconnect();\n        }\n      });\n    }, this.options.heartbeat);\n  },\n\n  disconnect: function (callback) {\n    this.stopHeartbeat();\n\n    if (!this.db) {\n      if (callback) callback(null);\n      return;\n    }\n\n    this.db.close(function (err) {\n      if (err) {\n        debug(err);\n      }\n      if (callback) callback(err);\n    });\n  },\n\n  clear: function (callback) {\n    var self = this;\n    async.parallel([\n      function (callback) {\n        self.events.remove({}, callback);\n      },\n      function (callback) {\n        self.snapshots.remove({}, callback);\n      },\n      function (callback) {\n        self.transactions.remove({}, callback);\n      }\n    ], function (err) {\n      if (err) {\n        debug(err);\n      }\n      if (callback) callback(err);\n    });\n  },\n\n  getNewId: function(callback) {\n    callback(null, new ObjectID().toString());\n  },\n\n  addEvents: function (events, callback) {\n    if (events.length === 0) {\n      if (callback) { callback(null); }\n      return;\n    }\n\n    var commitId = events[0].commitId;\n\n    var noAggregateId = false,\n      invalidCommitId = false;\n\n    _.forEach(events, function (evt) {\n      if (!evt.aggregateId) {\n        noAggregateId = true;\n      }\n\n      if (!evt.commitId || evt.commitId !== commitId) {\n        invalidCommitId = true;\n      }\n\n      evt._id = evt.id;\n      evt.dispatched = false;\n    });\n\n    if (noAggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    if (invalidCommitId) {\n      var errMsg = 'commitId not defined or different!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var self = this;\n\n    if (events.length === 1) {\n      return this.events.insert(events, callback);\n    }\n\n    var tx = {\n      _id: commitId,\n      events: events,\n      aggregateId: events[0].aggregateId,\n      aggregate: events[0].aggregate,\n      context: events[0].context\n    };\n\n    this.transactions.insert(tx, function (err) {\n      if (err) {\n        debug(err);\n        if (callback) callback(err);\n        return;\n      }\n\n      self.events.insert(events, function (err) {\n        if (err) {\n          debug(err);\n          if (callback) callback(err);\n          return;\n        }\n\n        self.removeTransactions(events[events.length - 1]);\n\n        if (callback) { callback(null); }\n      });\n    });\n  },\n\n  getEvents: function (query, skip, limit, callback) {\n    var findStatement = {};\n\n    if (query.aggregate) {\n      findStatement.aggregate = query.aggregate;\n    }\n\n    if (query.context) {\n      findStatement.context = query.context;\n    }\n\n    if (query.aggregateId) {\n      findStatement.aggregateId = query.aggregateId;\n    }\n\n    if (limit === -1) {\n      return this.events.find(findStatement, { sort: [['commitStamp', 'asc'], ['streamRevision', 'asc'], ['commitSequence', 'asc']] }).skip(skip).toArray(callback);\n    }\n\n    this.events.find(findStatement, { sort: [['commitStamp', 'asc'], ['streamRevision', 'asc'], ['commitSequence', 'asc']] }).skip(skip).limit(limit).toArray(callback);\n  },\n\n  getEventsSince: function (date, skip, limit, callback) {\n    var findStatement = { commitStamp: { '$gte': date } };\n\n    if (limit === -1) {\n      return this.events.find(findStatement, { sort: [['commitStamp', 'asc'], ['streamRevision', 'asc'], ['commitSequence', 'asc']] }).skip(skip).toArray(callback);\n    }\n\n    this.events.find(findStatement, { sort: [['commitStamp', 'asc'], ['streamRevision', 'asc'], ['commitSequence', 'asc']] }).skip(skip).limit(limit).toArray(callback);\n  },\n\n  getEventsByRevision: function (query, revMin, revMax, callback) {\n    if (!query.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var streamRevOptions = { '$gte': revMin, '$lt': revMax };\n    if (revMax === -1) {\n      streamRevOptions = { '$gte': revMin };\n    }\n\n    var findStatement = {\n      aggregateId: query.aggregateId,\n      streamRevision: streamRevOptions\n    };\n\n    if (query.aggregate) {\n      findStatement.aggregate = query.aggregate;\n    }\n\n    if (query.context) {\n      findStatement.context = query.context;\n    }\n\n    var self = this;\n\n    this.events.find(findStatement, { sort: [['commitStamp', 'asc'], ['streamRevision', 'asc'], ['commitSequence', 'asc']] }).toArray(function (err, res) {\n      if (err) {\n        debug(err);\n        return callback(err);\n      }\n\n      if (!res || res.length === 0) {\n        return callback(null, []);\n      }\n\n      var lastEvt = res[res.length - 1];\n\n      var txOk = (revMax === -1 && !lastEvt.restInCommitStream) ||\n                 (revMax !== -1 && (lastEvt.streamRevision === revMax - 1 || !lastEvt.restInCommitStream));\n\n      if (txOk) {\n        // the following is usually unnecessary\n        self.removeTransactions(lastEvt);\n\n        return callback(null, res);\n      }\n\n      self.repairFailedTransaction(lastEvt, function (err) {\n        if (err) {\n          if (err.message.indexOf('missing tx entry') >= 0) {\n            return callback(null, res);\n          }\n          debug(err);\n          return callback(err);\n        }\n\n        self.getEventsByRevision(query, revMin, revMax, callback);\n      });\n    });\n  },\n\n  getUndispatchedEvents: function (query, callback) {\n    var findStatement = {\n      dispatched: false\n    };\n\n    if (query && query.aggregate) {\n      findStatement.aggregate = query.aggregate;\n    }\n\n    if (query && query.context) {\n      findStatement.context = query.context;\n    }\n\n    if (query && query.aggregateId) {\n      findStatement.aggregateId = query.aggregateId;\n    }\n\n    this.events.find(findStatement, { sort: [['commitStamp', 'asc'], ['streamRevision', 'asc'], ['commitSequence', 'asc']] }).toArray(callback);\n  },\n\n  setEventToDispatched: function (id, callback) {\n    var updateCommand = { '$unset' : { 'dispatched': null } };\n    this.events.update({'_id' : id}, updateCommand, callback);\n  },\n\n  addSnapshot: function(snap, callback) {\n    if (!snap.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    snap._id = snap.id;\n    this.snapshots.insert(snap, callback);\n  },\n\n  cleanSnapshots: function (query, callback) {\n    if (!query.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var findStatement = {\n      aggregateId: query.aggregateId\n    };\n\n    if (query.aggregate) {\n      findStatement.aggregate = query.aggregate;\n    }\n\n    if (query.context) {\n      findStatement.context = query.context;\n    }\n\n    this.snapshots.find(findStatement, {\n      sort: [['revision', 'desc'], ['version', 'desc'], ['commitStamp', 'desc']]\n    })\n      .skip(this.options.maxSnapshotsCount)\n      .toArray(removeElements(this.snapshots, callback));\n  },\n\n  getSnapshot: function (query, revMax, callback) {\n    if (!query.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var findStatement = {\n      aggregateId: query.aggregateId\n    };\n\n    if (query.aggregate) {\n      findStatement.aggregate = query.aggregate;\n    }\n\n    if (query.context) {\n      findStatement.context = query.context;\n    }\n\n    if (revMax > -1) {\n      findStatement.revision = { '$lte': revMax };\n    }\n\n    this.snapshots.findOne(findStatement, { sort: [['revision', 'desc'], ['version', 'desc'], ['commitStamp', 'desc']] }, callback);\n  },\n\n  removeTransactions: function (evt, callback) {\n    if (!evt.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var findStatement = { aggregateId: evt.aggregateId };\n\n    if (evt.aggregate) {\n      findStatement.aggregate = evt.aggregate;\n    }\n\n    if (evt.context) {\n      findStatement.context = evt.context;\n    }\n\n    // the following is usually unnecessary\n    this.transactions.remove(findStatement, function (err) {\n      if (err) {\n        debug(err);\n      }\n      if (callback) { callback(err); }\n    });\n  },\n\n  getPendingTransactions: function (callback) {\n    var self = this;\n    this.transactions.find({}).toArray(function (err, txs) {\n      if (err) {\n        debug(err);\n        return callback(err);\n      }\n\n      if (txs.length === 0) {\n        return callback(null, txs);\n      }\n\n      var goodTxs = [];\n\n      async.map(txs, function (tx, clb) {\n        var findStatement = { commitId: tx._id, aggregateId: tx.aggregateId };\n\n        if (tx.aggregate) {\n          findStatement.aggregate = tx.aggregate;\n        }\n\n        if (tx.context) {\n          findStatement.context = tx.context;\n        }\n\n        self.events.findOne(findStatement, function (err, evt) {\n          if (err) {\n            return clb(err);\n          }\n\n          if (evt) {\n            goodTxs.push(evt);\n          } else {\n            self.transactions.remove({ _id: tx._id }, function (err) {\n              if (err) {\n                debug(err);\n              }\n            });\n          }\n\n          clb(null);\n        });\n      }, function (err) {\n        if (err) {\n          debug(err);\n          return callback(err);\n        }\n\n        callback(null, goodTxs);\n      })\n    });\n  },\n\n  getLastEvent: function (query, callback) {\n    if (!query.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var findStatement = { aggregateId: query.aggregateId };\n\n    if (query.aggregate) {\n      findStatement.aggregate = query.aggregate;\n    }\n\n    if (query.context) {\n      findStatement.context = query.context;\n    }\n\n    this.events.findOne(findStatement, { sort: [['commitStamp', 'desc'], ['streamRevision', 'desc'], ['commitSequence', 'desc']] }, callback);\n  },\n\n  repairFailedTransaction: function (lastEvt, callback) {\n    var self = this;\n\n    //var findStatement = {\n    //  aggregateId: lastEvt.aggregateId,\n    //  'events.streamRevision': lastEvt.streamRevision + 1\n    //};\n    //\n    //if (lastEvt.aggregate) {\n    //  findStatement.aggregate = lastEvt.aggregate;\n    //}\n    //\n    //if (lastEvt.context) {\n    //  findStatement.context = lastEvt.context;\n    //}\n\n    //this.transactions.findOne(findStatement, function (err, tx) {\n    this.transactions.findOne({ _id: lastEvt.commitId }, function (err, tx) {\n      if (err) {\n        debug(err);\n        return callback(err);\n      }\n\n      if (!tx) {\n        var err = new Error('missing tx entry for aggregate ' + lastEvt.aggregateId);\n        debug(err);\n        return callback(err);\n      }\n\n      var missingEvts = tx.events.slice(tx.events.length - lastEvt.restInCommitStream);\n\n      self.events.insert(missingEvts, function (err) {\n        if (err) {\n          debug(err);\n          return callback(err);\n        }\n\n        self.removeTransactions(lastEvt);\n\n        callback(null);\n      });\n    });\n  }\n\n});\n\nfunction removeElements(collection, callback) {\n  return function (error, elements) {\n    if (error) {\n      debug(error);\n      return callback(error);\n    }\n    async.each(elements, function (element, callback) {\n      try {\n        collection.deleteOne({_id: element._id});\n        callback();\n      } catch (error) {\n        callback(error);\n      }\n    }, function(error) {\n      callback(error, elements.length);\n    });\n  }\n}\n\nmodule.exports = Mongo;\n","/home/travis/build/npmtest/node-npmtest-eventstore/node_modules/eventstore/lib/databases/redis.js":"'use strict';\n\nvar util = require('util'),\n  fs = require('fs'),\n  Store = require('../base'),\n  _ = require('lodash'),\n  async = require('async'),\n  redis = Store.use('redis'),\n  jsondate = require('jsondate'),\n  debug = require('debug')('eventstore:store:redis');\n\nfunction Redis(options) {\n  options = options || {};\n\n  Store.call(this, options);\n\n  var defaults = {\n    host: 'localhost',\n    port: 6379,\n    prefix: 'eventstore',\n    eventsCollectionName: 'events',\n    snapshotsCollectionName: 'snapshots',\n    max_attempts: 1,\n    retry_strategy: function (options) {\n      return undefined;\n    }//,\n    // heartbeat: 60 * 1000\n  };\n\n  _.defaults(options, defaults);\n\n  if (options.url) {\n    var url = require('url').parse(options.url);\n    if (url.protocol === 'redis:') {\n      if (url.auth) {\n        var userparts = url.auth.split(':');\n        options.user = userparts[0];\n        if (userparts.length === 2) {\n          options.password = userparts[1];\n        }\n      }\n      options.host = url.hostname;\n      options.port = url.port;\n      if (url.pathname) {\n        options.db = url.pathname.replace('/', '', 1);\n      }\n    }\n  }\n\n  this.options = options;\n}\n\nutil.inherits(Redis, Store);\n\n// helpers\nfunction handleResultSet(err, res, callback) {\n  if (err) {\n    debug(err);\n    return callback(err);\n  }\n\n  if (!res || res.length === 0) {\n    return callback(null, []);\n  }\n  var arr = [];\n\n  res.forEach(function (item) {\n    arr.push(jsondate.parse(item));\n  });\n\n  callback(null, arr);\n}\n\n_.extend(Redis.prototype, {\n\n  connect: function (callback) {\n    var self = this;\n\n    var options = this.options;\n\n    this.client = new redis.createClient(options.port || options.socket, options.host, _.omit(options, 'prefix'));\n\n    var calledBack = false;\n\n    if (options.password) {\n      this.client.auth(options.password, function (err) {\n        if (err && !calledBack && callback) {\n          calledBack = true;\n          if (callback) callback(err, self);\n          return;\n        }\n\n        if (err) {\n          debug(err);\n        }\n      });\n    }\n\n    if (options.db) {\n      this.client.select(options.db);\n    }\n\n    this.client.on('end', function () {\n      self.disconnect();\n      self.stopHeartbeat();\n    });\n\n    this.client.on('error', function (err) {\n      debug(err);\n\n      if (calledBack) return;\n      calledBack = true;\n      if (callback) callback(null, self);\n    });\n\n    this.client.on('connect', function () {\n      if (options.db) {\n        self.client.send_anyways = true;\n        self.client.select(options.db);\n        self.client.send_anyways = false;\n      }\n\n      self.emit('connect');\n\n      if (self.options.heartbeat) {\n        self.startHeartbeat();\n      }\n\n      if (calledBack) return;\n      calledBack = true;\n      if (callback) callback(null, self);\n    });\n  },\n\n  stopHeartbeat: function () {\n    if (this.heartbeatInterval) {\n      clearInterval(this.heartbeatInterval);\n      delete this.heartbeatInterval;\n    }\n  },\n\n  startHeartbeat: function () {\n    var self = this;\n\n    var gracePeriod = Math.round(this.options.heartbeat / 2);\n    this.heartbeatInterval = setInterval(function () {\n      var graceTimer = setTimeout(function () {\n        if (self.heartbeatInterval) {\n          console.error((new Error('Heartbeat timeouted after ' + gracePeriod + 'ms (redis)')).stack);\n          self.disconnect();\n        }\n      }, gracePeriod);\n\n      self.client.ping(function (err) {\n        if (graceTimer) clearTimeout(graceTimer);\n        if (err) {\n          console.error(err.stack || err);\n          self.disconnect();\n        }\n      });\n    }, this.options.heartbeat);\n  },\n\n  disconnect: function (callback) {\n    this.stopHeartbeat();\n\n    if (this.client) {\n      this.client.end(true);\n    }\n    this.emit('disconnect');\n    if (callback) callback(null, this);\n  },\n\n  clear: function (callback) {\n    var self = this;\n    async.parallel([\n      function (callback) {\n        self.client.del('nextItemId:' + self.options.prefix, callback);\n      },\n      function (callback) {\n        self.client.keys(self.options.prefix + ':*', function (err, keys) {\n          if (err) {\n            return callback(err);\n          }\n          async.each(keys, function (key, callback) {\n            self.client.del(key, callback);\n          }, callback);\n        });\n      }\n    ], function (err) {\n      if (err) {\n        debug(err);\n      }\n      if (callback) callback(err);\n    });\n  },\n\n  getNewId: function (callback) {\n    this.client.incr('nextItemId:' + this.options.prefix, function (err, id) {\n      if (err) {\n        debug(err);\n        return callback(err);\n      }\n      callback(null, id.toString());\n    });\n  },\n\n  addEvents: function (events, callback) {\n\n    var self = this;\n\n    var aggregateId = events[0].aggregateId;\n    var aggregate = events[0].aggregate || '_general';\n    var context = events[0].context || '_general';\n\n    var noAggId = events.filter(function (event) {\n      return !event.aggregateId\n    }).length > 0;\n\n    if (noAggId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    if (!events || events.length === 0) {\n      return callback(null);\n    }\n\n    function eventKey(event) {\n      return event.commitStamp.getTime() + ':' + event.commitSequence.toString() + ':' + context + ':' + aggregate + ':' + aggregateId + ':' + event.id;\n    }\n\n    var prefix = self.options.prefix + ':' + self.options.eventsCollectionName;\n    var revisionKey = prefix + ':' + context + ':' + aggregate + ':' + aggregateId + ':revision';\n    var multi = events.reduce(function (multi) {\n      return multi.incr(revisionKey);\n    }, this.client.multi());\n\n    multi.exec(function (error, revisions) {\n      if (error) {\n        debug(error);\n        return callback(error);\n      }\n\n      var errors = revisions.filter(function (reply) {\n        return reply instanceof Error;\n      });\n\n      if (errors.length) {\n        var message = 'error while adding events for aggregate ' + aggregate + ' ' + aggregateId;\n        return callback(new Error(message + '\\n' + errors.join('\\n')));\n      }\n\n      var savedKeysAndEvents = events.map(function(event, index) {\n        var key = prefix + ':' + eventKey(event);\n        event.streamRevision = parseInt(revisions[index], 10) - 1;\n        event.applyMappings();\n        return [key, JSON.stringify(event)];\n      });\n\n      var undispatchedKeysAndEvents = events.map(function (event) {\n        var key = self.options.prefix + ':undispatched_' + self.options.eventsCollectionName + ':' + eventKey(event);\n        return [key, JSON.stringify(event)];\n      });\n\n      var args = _.flatten(savedKeysAndEvents)\n        .concat(_.flatten(undispatchedKeysAndEvents))\n        .concat(callback);\n      self.client.mset.apply(self.client, args);\n    });\n  },\n\n  scan: function (key, cursor, handleKeys, callback) {\n    var self = this;\n\n    if (!callback) {\n      callback = handleKeys;\n      handleKeys = cursor;\n      cursor = 0;\n    }\n\n    (function scanRecursive(curs) {\n      self.client.scan(curs, 'match', key, function (err, res) {\n        if (err) {\n          return callback(err);\n        }\n\n        function next() {\n          if (res[0] === '0') {\n            callback(null);\n          } else {\n            scanRecursive(res[0]);\n          }\n        }\n\n        if (res[1].length === 0) {\n          return next();\n        }\n\n        handleKeys(res[1], function (err) {\n          if (err) {\n            return callback(err);\n          }\n          next();\n        });\n      });\n    })(cursor);\n  },\n\n  getEvents: function (query, skip, limit, callback) {\n    var aggregateId = query.aggregateId || '*';\n    var aggregate = query.aggregate || '*';\n    var context = query.context || '*';\n\n    var self = this;\n\n    var allKeys = [];\n\n    this.scan(this.options.prefix + ':' + this.options.eventsCollectionName + ':*:*:' + context + ':' + aggregate + ':' + aggregateId + ':*',\n      function (keys, fn) {\n        allKeys = allKeys.concat(keys);\n        fn();\n      }, function (err) {\n        if (err) {\n          debug(err);\n          if (callback) callback(err);\n          return;\n        }\n\n        allKeys = _.sortBy(allKeys, function (s) {\n          return s;\n        });\n\n        if (limit === -1) {\n          allKeys = allKeys.slice(skip);\n        }\n        else {\n          allKeys = allKeys.slice(skip, skip + limit);\n        }\n\n        if (allKeys.length === 0) {\n          return callback(null, []);\n        }\n\n        var args = allKeys.concat(function (err, res) {\n          handleResultSet(err, res, callback);\n        });\n\n        self.client.mget.apply(self.client, args);\n      }\n    );\n  },\n\n  getEventsSince: function (date, skip, limit, callback) {\n    var self = this;\n\n    var allKeys = [];\n\n    this.scan(this.options.prefix + ':' + this.options.eventsCollectionName + ':*:*:*:*:*:*',\n      function (keys, fn) {\n        keys = _.filter(keys, function (s) {\n          var parts = s.split(':');\n          var timePart = parseInt(parts[2], 10);\n          return timePart >= date.getTime();\n        });\n\n        allKeys = allKeys.concat(keys);\n        fn();\n      }, function (err) {\n        if (err) {\n          debug(err);\n          if (callback) callback(err);\n          return;\n        }\n\n        allKeys = _.sortBy(allKeys, function (s) {\n          return s;\n        });\n\n        if (limit === -1) {\n          allKeys = allKeys.slice(skip);\n        }\n        else {\n          allKeys = allKeys.slice(skip, skip + limit);\n        }\n\n        if (allKeys.length === 0) {\n          return callback(null, []);\n        }\n\n        var args = allKeys.concat(function (err, res) {\n          handleResultSet(err, res, callback);\n        });\n\n        self.client.mget.apply(self.client, args);\n      }\n    );\n  },\n\n  getEventsByRevision: function (query, revMin, revMax, callback) {\n    if (!query.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var aggregateId = query.aggregateId;\n    var aggregate = query.aggregate || '*';\n    var context = query.context || '*';\n\n    var self = this;\n\n    var allKeys = [];\n\n    this.scan(this.options.prefix + ':' + this.options.eventsCollectionName + ':*:*:' + context + ':' + aggregate + ':' + aggregateId + ':*',\n      function (keys, fn) {\n        allKeys = allKeys.concat(keys);\n        fn();\n      }, function (err) {\n        if (err) {\n          debug(err);\n          if (callback) callback(err);\n          return;\n        }\n\n        allKeys = _.sortBy(allKeys, function (s) {\n          return s;\n        });\n\n        if (revMax === -1) {\n          allKeys = allKeys.slice(revMin);\n        }\n        else {\n          allKeys = allKeys.slice(revMin, revMax);\n        }\n\n        if (allKeys.length === 0) {\n          return callback(null, []);\n        }\n\n        var args = allKeys.concat(function (err, res) {\n          handleResultSet(err, res, callback);\n        });\n\n        self.client.mget.apply(self.client, args);\n      }\n    );\n  },\n\n  getLastEvent: function (query, callback) {\n    if (!query.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var aggregateId = query.aggregateId || '*';\n    var aggregate = query.aggregate || '*';\n    var context = query.context || '*';\n\n    var self = this;\n\n    var allKeys = [];\n\n    this.scan(this.options.prefix + ':' + this.options.eventsCollectionName + ':*:*:' + context + ':' + aggregate + ':' + aggregateId + ':*',\n      function (keys, fn) {\n        allKeys = allKeys.concat(keys);\n        fn();\n      }, function (err) {\n        if (err) {\n          debug(err);\n          if (callback) callback(err);\n          return;\n        }\n\n        allKeys = _.sortBy(allKeys, function (s) {\n          return s;\n        });\n\n        if (allKeys.length === 0) {\n          return callback(null, null);\n        }\n\n        var args = allKeys.concat(function (err, res) {\n          handleResultSet(err, res, function (err, evts) {\n            if (err) return callback(err);\n            if (evts.length === 0) return callback(null, null);\n            callback(null, evts[evts.length - 1])\n          });\n        });\n\n        self.client.mget.apply(self.client, args);\n      }\n    );\n  },\n\n  getUndispatchedEvents: function (query, callback) {\n    var self = this;\n\n    var aggregateId = '*';\n    var aggregate = '*';\n    var context = '*';\n\n    if (query) {\n      aggregateId = query.aggregateId || '*';\n      aggregate = query.aggregate || '*';\n      context = query.context || '*';\n    }\n\n    var evts = [];\n\n    this.scan(this.options.prefix + ':undispatched_' + this.options.eventsCollectionName + ':*:*:' + context + ':' + aggregate + ':' + aggregateId + ':*',\n      function (keys, fn) {\n        var args = keys.concat(function (err, res) {\n          handleResultSet(err, res, function (err, events) {\n            if (err) {\n              return fn(err);\n            }\n\n            evts = evts.concat(events);\n            fn();\n          });\n        });\n\n        self.client.mget.apply(self.client, args);\n      }, function (err) {\n        if (err) {\n          debug(err);\n          if (callback) callback(err);\n          return;\n        }\n\n        evts = _.sortBy(evts, function (s) {\n          return s.commitStamp.getTime() + ':' + s.commitSequence.toString();\n        });\n\n        callback(null, evts);\n      }\n    );\n  },\n\n  setEventToDispatched: function (id, callback) {\n    var self = this;\n\n    this.scan(this.options.prefix + ':undispatched_' + this.options.eventsCollectionName + ':*:*:*:*:*:' + id,\n      function (keys, fn) {\n        var args = keys.concat(fn);\n        self.client.del.apply(self.client, args);\n      }, function (err) {\n        if (err) {\n          debug(err);\n          if (callback) callback(err);\n          return;\n        }\n\n        if (callback) callback(null);\n      }\n    );\n  },\n\n  addSnapshot: function (snap, callback) {\n    if (!snap.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var aggregateId = snap.aggregateId;\n    var aggregate = snap.aggregate || '_general';\n    var context = snap.context || '_general';\n\n    this.client.set(this.options.prefix + ':' + this.options.snapshotsCollectionName + ':' + snap.commitStamp.getTime() + ':' + context + ':' + aggregate + ':' + aggregateId + ':' + snap.id, JSON.stringify(snap), function (err) {\n      if (callback) callback(err);\n    });\n  },\n\n  cleanSnapshots: function (query, callback) {\n    var self = this;\n\n    this.scanSnapshots(query, function(error, keys) {\n      if (error) {\n        debug(error);\n        if (callback) callback(error);\n        return;\n      }\n\n      var keysToDelete = keys\n        .sort()\n        .slice(0, -1 * self.options.maxSnapshotsCount)\n        .concat(callback);\n\n      self.client.del.apply(self.client, keysToDelete);\n    });\n  },\n\n  scanSnapshots: function (query, callback) {\n    if (!query.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var aggregateId = query.aggregateId;\n    var aggregate = query.aggregate || '*';\n    var context = query.context || '*';\n\n    var allKeys = [];\n\n    this.scan(this.options.prefix + ':' + this.options.snapshotsCollectionName + ':*:' + context + ':' + aggregate + ':' + aggregateId + ':*',\n      function (keys, fn) {\n        allKeys = allKeys.concat(keys);\n        fn();\n      }, function (error) {\n        callback(error, allKeys);\n      }\n    );\n  },\n\n  getSnapshot: function (query, revMax, callback) {\n    var self = this;\n\n    this.scanSnapshots(query, function (err, allKeys) {\n      if (err) {\n        debug(err);\n        if (callback) callback(err);\n        return;\n      }\n\n      allKeys = _.sortBy(allKeys, function (s) {\n        return s;\n      }).reverse();\n\n      if (revMax === -1) { // by default the last snapshot is kept\n        allKeys = allKeys.slice(0, 1);\n      }\n\n      if (allKeys.length === 0) {\n        return callback(null, null);\n      }\n\n      // iterating recursively over snapshots, from latest to oldest\n      (function nextSnapshot(key) {\n        self.client.get(key, function (err, res) {\n          if (err) {\n            debug(err);\n            return callback(err);\n          }\n\n          var snapshot = jsondate.parse(res);\n          if (revMax > -1 && snapshot.revision > revMax) {\n            if (allKeys.length > 0) {\n              nextSnapshot(allKeys.shift());\n            } else {\n              callback(null, null);\n            }\n          } else {\n            callback(null, snapshot);\n          }\n        });\n      })(allKeys.shift());\n    })\n  }\n\n});\n\nmodule.exports = Redis;\n","/home/travis/build/npmtest/node-npmtest-eventstore/node_modules/eventstore/lib/databases/tingodb.js":"'use strict';\n\nvar util = require('util'),\n  Store = require('../base'),\n  _ = require('lodash'),\n  async = require('async'),\n  tingodb = Store.use('tingodb')(),\n  ObjectID = tingodb.ObjectID,\n  debug = require('debug')('eventstore:store:tingodb');\n\nfunction Tingo(options) {\n  options = options || {};\n\n  Store.call(this, options);\n\n  var defaults = {\n    dbPath: require('path').join(__dirname, '../../'),\n    eventsCollectionName: 'events',\n    snapshotsCollectionName: 'snapshots',\n    transactionsCollectionName: 'transactions'\n  };\n\n  _.defaults(options, defaults);\n\n  this.options = options;\n}\n\nutil.inherits(Tingo, Store);\n\n_.extend(Tingo.prototype, {\n\n  connect: function (callback) {\n    var options = this.options;\n\n    this.db = new tingodb.Db(options.dbPath, {});\n    // this.db.on('close', function() {\n    //   self.emit('disconnect');\n    // });\n    this.events = this.db.collection(options.eventsCollectionName + '.tingo');\n    this.events.ensureIndex({ aggregateId: 1, streamRevision: 1 },\n      function (err) { if (err) { debug(err); } });\n    this.events.ensureIndex({ commitStamp: 1 },\n        function (err) { if (err) { debug(err); } });\n    this.events.ensureIndex({ dispatched: 1 }, { sparse: true },\n      function (err) { if (err) { debug(err); } });\n\n    this.snapshots = this.db.collection(options.snapshotsCollectionName + '.tingo');\n    this.snapshots.ensureIndex({ aggregateId: 1, revision: -1 },\n      function (err) { if (err) { debug(err); } });\n\n    this.transactions = this.db.collection(options.transactionsCollectionName + '.tingo');\n    this.transactions.ensureIndex({ aggregateId: 1, 'events.streamRevision': 1 },\n      function (err) { if (err) { debug(err); } });\n\n    this.emit('connect');\n    if (callback) callback(null, this);\n  },\n\n  disconnect: function (callback) {\n    if (!this.db) {\n      if (callback) callback(null);\n      return;\n    }\n\n    this.emit('disconnect');\n    this.db.close(callback || function () {});\n  },\n\n  clear: function (callback) {\n    var self = this;\n    async.parallel([\n      function (callback) {\n        self.events.remove({}, callback);\n      },\n      function (callback) {\n        self.snapshots.remove({}, callback);\n      },\n      function (callback) {\n        self.transactions.remove({}, callback);\n      }\n    ], function (err) {\n      if (err) {\n        debug(err);\n      }\n      if (callback) callback(err);\n    });\n  },\n\n  getNewId: function(callback) {\n    callback(null, new ObjectID().toString());\n  },\n\n  addEvents: function (events, callback) {\n    var noAggId = false;\n\n    _.each(events, function (evt) {\n      if (!evt.aggregateId) {\n        noAggId = true;\n      }\n\n      evt._id = evt.id;\n      evt.dispatched = false;\n    });\n\n    if (noAggId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var self = this;\n\n    if (events.length === 1) {\n      return this.events.insert(events, callback);\n    }\n\n    var tx = {\n      _id: events[0].commitId,\n      events: events,\n      aggregateId: events[0].aggregateId,\n      aggregate: events[0].aggregate,\n      context: events[0].context\n    };\n\n    this.transactions.insert(tx, function (err) {\n      if (err) {\n        debug(err);\n        if (callback) callback(err);\n        return;\n      }\n\n      self.events.insert(events, function (err) {\n        if (err) {\n          debug(err);\n          if (callback) callback(err);\n          return;\n        }\n\n        self.removeTransactions(events[events.length - 1]);\n\n        if (callback) { callback(null); }\n      });\n    });\n  },\n\n  getEvents: function (query, skip, limit, callback) {\n    var findStatement = {};\n\n    if (query.aggregate) {\n      findStatement.aggregate = query.aggregate;\n    }\n\n    if (query.context) {\n      findStatement.context = query.context;\n    }\n\n    if (query.aggregateId) {\n      findStatement['$or'] = [\n        { aggregateId: query.aggregateId },\n        { streamId: query.aggregateId } // just for compatability of < 1.0.0\n      ];\n    }\n\n    if (limit === -1) {\n      return this.events.find(findStatement, { sort: [['commitStamp', 'asc'], ['streamRevision', 'asc'], ['commitSequence', 'asc']] }).skip(skip).toArray(callback);\n    }\n\n    this.events.find(findStatement, { sort: [['commitStamp', 'asc'], ['streamRevision', 'asc'], ['commitSequence', 'asc']] }).skip(skip).limit(limit).toArray(callback);\n  },\n\n  getEventsSince: function (date, skip, limit, callback) {\n    var findStatement = { commitStamp: { '$gte': date } };\n\n    if (limit === -1) {\n      return this.events.find(findStatement, { sort: [['commitStamp', 'asc'], ['streamRevision', 'asc'], ['commitSequence', 'asc']] }).skip(skip).toArray(callback);\n    }\n\n    this.events.find(findStatement, { sort: [['commitStamp', 'asc'], ['streamRevision', 'asc'], ['commitSequence', 'asc']] }).skip(skip).limit(limit).toArray(callback);\n  },\n\n  getEventsByRevision: function (query, revMin, revMax, callback) {\n    if (!query.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var streamRevOptions = { '$gte': revMin, '$lt': revMax };\n    if (revMax == -1) {\n      streamRevOptions = { '$gte': revMin };\n    }\n\n    var findStatement = {\n      '$or': [\n        { aggregateId: query.aggregateId },\n        { streamId: query.aggregateId } // just for compatability of < 1.0.0\n      ],\n      streamRevision: streamRevOptions\n    };\n\n    if (query.aggregate) {\n      findStatement.aggregate = query.aggregate;\n    }\n\n    if (query.context) {\n      findStatement.context = query.context;\n    }\n\n    var self = this;\n\n    this.events.find(findStatement, { sort: [['commitStamp', 'asc'], ['streamRevision', 'asc'], ['commitSequence', 'asc']] }).toArray(function (err, res) {\n      if (err) {\n        debug(err);\n        return callback(err);\n      }\n\n      if (!res || res.length === 0) {\n        return callback(null, []);\n      }\n\n      var lastEvt = res[res.length - 1];\n\n      var txOk = (revMax === -1 && !lastEvt.restInCommitStream) ||\n                 (revMax !== -1 && (lastEvt.streamRevision === revMax - 1 || !lastEvt.restInCommitStream));\n\n      if (txOk) {\n        // the following is usually unnecessary\n        self.removeTransactions(lastEvt);\n\n        return callback(null, res);\n      }\n\n      self.repairFailedTransaction(lastEvt, function (err) {\n        if (err) {\n          if (err.message.indexOf('missing tx entry') >= 0) {\n            return callback(null, res);\n          }\n          debug(err);\n          return callback(err);\n        }\n\n        self.getEventsByRevision(query, revMin, revMax, callback);\n      });\n    });\n  },\n\n  getUndispatchedEvents: function (query, callback) {\n    var findStatement = {\n      dispatched: false\n    };\n\n    if (query && query.aggregate) {\n      findStatement.aggregate = query.aggregate;\n    }\n\n    if (query && query.context) {\n      findStatement.context = query.context;\n    }\n\n    if (query && query.aggregateId) {\n      findStatement.aggregateId = query.aggregateId;\n    }\n\n    this.events.find(findStatement, { sort: [['commitStamp', 'asc'], ['streamRevision', 'asc'], ['commitSequence', 'asc']] }).toArray(callback);\n  },\n\n  setEventToDispatched: function (id, callback) {\n    var updateCommand = { '$unset' : { 'dispatched': null } };\n    this.events.update({'_id' : id}, updateCommand, callback);\n  },\n\n  addSnapshot: function(snap, callback) {\n    if (!snap.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    snap._id = snap.id;\n    this.snapshots.insert(snap, callback);\n  },\n\n  cleanSnapshots: function (query, callback) {\n    if (!query.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var findStatement = {\n      '$or': [\n        { aggregateId: query.aggregateId },\n        { streamId: query.aggregateId } // just for compatability of < 1.0.0\n      ]\n    };\n\n    if (query.aggregate) {\n      findStatement.aggregate = query.aggregate;\n    }\n\n    if (query.context) {\n      findStatement.context = query.context;\n    }\n\n    this.snapshots.find(findStatement, {\n      sort: [['revision', 'desc'], ['version', 'desc'], ['commitStamp', 'desc']]\n    })\n      .skip(this.options.maxSnapshotsCount)\n      .toArray(removeElements(this.snapshots, callback));\n  },\n\n  getSnapshot: function (query, revMax, callback) {\n    if (!query.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var findStatement = {\n      '$or': [\n        { aggregateId: query.aggregateId },\n        { streamId: query.aggregateId } // just for compatability of < 1.0.0\n      ]\n    };\n\n    if (query.aggregate) {\n      findStatement.aggregate = query.aggregate;\n    }\n\n    if (query.context) {\n      findStatement.context = query.context;\n    }\n\n    if (revMax > -1) {\n      findStatement.revision = { '$lte': revMax };\n    }\n\n    this.snapshots.findOne(findStatement, { sort: [['revision', 'desc'], ['version', 'desc'], ['commitStamp', 'desc']] }, callback);\n  },\n\n  removeTransactions: function (evt, callback) {\n    if (!evt.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var findStatement = { aggregateId: evt.aggregateId };\n\n    if (evt.aggregate) {\n      findStatement.aggregate = evt.aggregate;\n    }\n\n    if (evt.context) {\n      findStatement.context = evt.context;\n    }\n\n    // the following is usually unnecessary\n    this.transactions.remove(findStatement, function (err) {\n      if (err) {\n        debug(err);\n      }\n      if (callback) { callback(err); }\n    });\n  },\n\n  getPendingTransactions: function (callback) {\n    var self = this;\n    this.transactions.find({}).toArray(function (err, txs) {\n      if (err) {\n        debug(err);\n        return callback(err);\n      }\n\n      if (txs.length === 0) {\n        return callback(null, txs);\n      }\n\n      var goodTxs = [];\n\n      async.map(txs, function (tx, clb) {\n        var findStatement = { commitId: tx._id, aggregateId: tx.aggregateId };\n\n        if (tx.aggregate) {\n          findStatement.aggregate = tx.aggregate;\n        }\n\n        if (tx.context) {\n          findStatement.context = tx.context;\n        }\n\n        self.events.findOne(findStatement, function (err, evt) {\n          if (err) {\n            return clb(err);\n          }\n\n          if (evt) {\n            goodTxs.push(evt);\n          } else {\n            self.transactions.remove({ _id: tx._id }, function (err) {\n              if (err) {\n                debug(err);\n              }\n            });\n          }\n\n          clb(null);\n        });\n      }, function (err) {\n        if (err) {\n          debug(err);\n          return callback(err);\n        }\n\n        callback(null, goodTxs);\n      })\n    });\n  },\n\n  getLastEvent: function (query, callback) {\n    if (!query.aggregateId) {\n      var errMsg = 'aggregateId not defined!';\n      debug(errMsg);\n      if (callback) callback(new Error(errMsg));\n      return;\n    }\n\n    var findStatement = { aggregateId: query.aggregateId };\n\n    if (query.aggregate) {\n      findStatement.aggregate = query.aggregate;\n    }\n\n    if (query.context) {\n      findStatement.context = query.context;\n    }\n\n    this.events.findOne(findStatement, { sort: [['commitStamp', 'desc'], ['streamRevision', 'desc'], ['commitSequence', 'desc']] }, callback);\n  },\n\n  repairFailedTransaction: function (lastEvt, callback) {\n    var self = this;\n\n    //var findStatement = {\n    //  aggregateId: lastEvt.aggregateId,\n    //  'events.streamRevision': lastEvt.streamRevision + 1\n    //};\n    //\n    //if (lastEvt.aggregate) {\n    //  findStatement.aggregate = lastEvt.aggregate;\n    //}\n    //\n    //if (lastEvt.context) {\n    //  findStatement.context = lastEvt.context;\n    //}\n\n    //this.transactions.findOne(findStatement, function (err, tx) {\n    this.transactions.findOne({ _id: lastEvt.commitId }, function (err, tx) {\n      if (err) {\n        debug(err);\n        return callback(err);\n      }\n\n      if (!tx) {\n        var err = new Error('missing tx entry for aggregate ' + lastEvt.aggregateId);\n        debug(err);\n        return callback(err);\n      }\n\n      var missingEvts = tx.events.slice(tx.events.length - lastEvt.restInCommitStream);\n\n      self.events.insert(missingEvts, function (err) {\n        if (err) {\n          debug(err);\n          return callback(err);\n        }\n\n        self.removeTransactions(lastEvt);\n\n        callback(null);\n      });\n    });\n  }\n\n});\n\nfunction removeElements(collection, callback) {\n  return function (error, elements) {\n    if (error) {\n      debug(error);\n      return callback(error);\n    }\n    async.each(elements, function (element, callback) {\n      try {\n        collection.remove({_id: element._id});\n        callback();\n      } catch (error) {\n        callback(error);\n      }\n    }, function(error) {\n      callback(error, elements.length);\n    });\n  }\n}\n\nmodule.exports = Tingo;\n"}