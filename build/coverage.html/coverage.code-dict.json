{"/home/travis/build/npmtest/node-npmtest-eventstore/test.js":"/* istanbul instrument in package npmtest_eventstore */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eventstore/lib.npmtest_eventstore.js":"/* istanbul instrument in package npmtest_eventstore */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_eventstore = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_eventstore = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-eventstore/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-eventstore && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_eventstore */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_eventstore\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_eventstore.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_eventstore.rollup.js'] =\n            local.assetsDict['/assets.npmtest_eventstore.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_eventstore.__dirname +\n                    '/lib.npmtest_eventstore.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eventstore/node_modules/eventstore/index.js":"'use strict';\n\nvar Eventstore = require('./lib/eventstore'),\n  Base = require('./lib/base'),\n  _ = require('lodash'),\n  debug = require('debug')('eventstore');\n\nfunction getSpecificStore(options) {\n  options = options || {};\n\n  options.type = options.type || 'inmemory';\n\n  if (_.isFunction(options.type)) {\n    return options.type;\n  }\n\n  options.type = options.type.toLowerCase();\n\n  var dbPath = __dirname + \"/lib/databases/\" + options.type + \".js\";\n\n  var exists = require('fs').existsSync || require('path').existsSync;\n  if (!exists(dbPath)) {\n    var errMsg = 'Implementation for db \"' + options.type + '\" does not exist!';\n    console.log(errMsg);\n    debug(errMsg);\n    throw new Error(errMsg);\n  }\n\n  try {\n    var db = require(dbPath);\n    return db;\n  } catch (err) {\n\n    if (err.message.indexOf('Cannot find module') >= 0 &&\n      err.message.indexOf(\"'\") > 0 &&\n      err.message.lastIndexOf(\"'\") !== err.message.indexOf(\"'\")) {\n\n      var moduleName = err.message.substring(err.message.indexOf(\"'\") + 1, err.message.lastIndexOf(\"'\"));\n      var msg = 'Please install module \"' + moduleName +\n        '\" to work with db implementation \"' + options.type + '\"!';\n      console.log(msg);\n      debug(msg);\n    }\n\n    throw err;\n  }\n}\n\nmodule.exports = function(options) {\n  options = options || {};\n\n  var Store;\n\n  try {\n    Store = getSpecificStore(options);\n  } catch (err) {\n    throw err;\n  }\n\n  return new Eventstore(options, new Store(options));\n};\n\nmodule.exports.Store = Base;\n","/home/travis/build/npmtest/node-npmtest-eventstore/node_modules/eventstore/lib/eventstore.js":"'use strict';\n\nvar debug = require('debug')('eventstore'),\n  util = require('util'),\n  EventEmitter = require('events').EventEmitter,\n  _ = require('lodash'),\n  async = require('async'),\n  tolerate = require('tolerance'),\n  EventDispatcher = require('./eventDispatcher'),\n  EventStream = require('./eventStream'),\n  Snapshot = require('./snapshot');\n\n/**\n * Eventstore constructor\n * @param {Object} options The options.\n * @param {Store}  store   The db implementation.\n * @constructor\n */\nfunction Eventstore(options, store) {\n  this.options = options || {};\n  this.store = store;\n\n  this.eventMappings = {};\n\n  EventEmitter.call(this);\n}\n\nutil.inherits(Eventstore, EventEmitter);\n\n_.extend(Eventstore.prototype, {\n\n  /**\n   * Inject function for event publishing.\n   * @param {Function} fn the function to be injected\n   * @returns {Eventstore}  to be able to chain...\n   */\n  useEventPublisher: function (fn) {\n    if (fn.length === 1) {\n      fn = _.wrap(fn, function(func, evt, callback) {\n        func(evt);\n        callback(null);\n      });\n    }\n\n    this.publisher = fn;\n\n    return this;\n  },\n\n  /**\n   * Define which values should be mapped/copied to the payload event. [optional]\n   * @param {Object} mappings the mappings in dotty notation\n   *                          {\n   *                            id: 'id',\n   *                            commitId: 'commitId',\n   *                            commitSequence: 'commitSequence',\n   *                            commitStamp: 'commitStamp',\n   *                            streamRevision: 'streamRevision'\n   *                          }\n   * @returns {Eventstore}  to be able to chain...\n   */\n  defineEventMappings: function (mappings) {\n    if (!mappings || !_.isObject(mappings)) {\n      var err = new Error('Please pass a valid mapping values!');\n      debug(err);\n      throw err;\n    }\n\n    this.eventMappings = mappings;\n\n    return this;\n  },\n\n  /**\n   * Call this function to initialize the eventstore.\n   * If an event publisher function was injected it will additionally initialize an event dispatcher.\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  init: function (callback) {\n    var self = this;\n\n    function initDispatcher() {\n      debug('init event dispatcher');\n      self.dispatcher = new EventDispatcher(self.publisher, self);\n      self.dispatcher.start(callback);\n    }\n\n    this.store.on('connect', function () {\n      self.emit('connect');\n    });\n\n    this.store.on('disconnect', function () {\n      self.emit('disconnect');\n    });\n\n    process.nextTick(function() {\n      tolerate(function(callback) {\n        self.store.connect(callback);\n      }, self.options.timeout || 0, function (err) {\n        if (err) {\n          debug(err);\n          if (callback) callback(err);\n          return;\n        }\n        if (!self.publisher) {\n          debug('no publisher defined');\n          if (callback) callback(null);\n          return;\n        }\n        initDispatcher();\n      });\n    });\n  },\n\n  /**\n   * loads the events\n   * @param {Object || String} query    the query object [optional]\n   * @param {Number}           skip     how many events should be skipped? [optional]\n   * @param {Number}           limit    how many events do you want in the result? [optional]\n   * @param {Function}         callback the function that will be called when this action has finished\n   *                                    `function(err, events){}`\n   */\n  getEvents: function (query, skip, limit, callback) {\n    if (typeof query === 'function') {\n      callback = query;\n      skip = 0;\n      limit = -1;\n      query = {};\n    } else if (typeof skip === 'function') {\n      callback = skip;\n      skip = 0;\n      limit = -1;\n      if (typeof query === 'number') {\n        skip = query;\n        query = {};\n      }\n    } else if (typeof limit === 'function') {\n      callback = limit;\n      limit = -1;\n      if (typeof query === 'number') {\n        limit = skip;\n        skip = query;\n        query = {};\n      }\n    }\n\n    if (typeof query === 'string') {\n      query = { aggregateId: query };\n    }\n\n    var self = this;\n\n    this.store.getEvents(query, skip, limit, function (err, evts) {\n      if (err) {\n        return callback(err);\n      }\n      evts.next = function nextFn(callback) {\n        if (limit < 0) {\n          var resEvts = [];\n          resEvts.next = nextFn;\n          return process.nextTick(function () { callback(null, resEvts) });\n        }\n        skip += limit;\n        self.getEvents(query, skip, limit, callback);\n      };\n\n      callback(null, evts);\n    });\n  },\n\n  /**\n   * loads all the events since passed commitStamp\n   * @param {Date}     commitStamp the date object\n   * @param {Number}   skip        how many events should be skipped? [optional]\n   * @param {Number}   limit       how many events do you want in the result? [optional]\n   * @param {Function} callback    the function that will be called when this action has finished\n   *                               `function(err, events){}`\n   */\n  getEventsSince: function (commitStamp, skip, limit, callback) {\n    if (!commitStamp) {\n      var err = new Error('Please pass in a date object!');\n      debug(err);\n      throw err;\n    }\n\n    commitStamp = new Date(commitStamp);\n\n    if (typeof skip === 'function') {\n      callback = skip;\n      skip = 0;\n      limit = -1;\n    } else if (typeof limit === 'function') {\n      callback = limit;\n      limit = -1;\n    }\n\n    var self = this;\n\n    this.store.getEventsSince(commitStamp, skip, limit, function (err, evts) {\n      if (err) {\n        return callback(err);\n      }\n      evts.next = function nextFn(callback) {\n        if (limit < 0) {\n          var resEvts = [];\n          resEvts.next = nextFn;\n          return process.nextTick(function () { callback(null, resEvts) });\n        }\n        skip += limit;\n        self.getEventsSince(commitStamp, skip, limit, callback);\n      };\n\n      callback(null, evts);\n    });\n  },\n\n  /**\n   * loads the events\n   * @param {Object || String} query    the query object\n   * @param {Number}           revMin   revision start point [optional]\n   * @param {Number}           revMax   revision end point (hint: -1 = to end) [optional]\n   * @param {Function}         callback the function that will be called when this action has finished\n   *                                    `function(err, events){}`\n   */\n  getEventsByRevision: function (query, revMin, revMax, callback) {\n    if (typeof revMin === 'function') {\n      callback = revMin;\n      revMin = 0;\n      revMax = -1;\n    } else if (typeof revMax === 'function') {\n      callback = revMax;\n      revMax = -1;\n    }\n\n    if (typeof query === 'string') {\n      query = { aggregateId: query };\n    }\n\n    if (!query.aggregateId) {\n      var err = new Error('An aggregateId should be passed!');\n      debug(err);\n      if (callback) callback(err);\n      return;\n    }\n\n    this.store.getEventsByRevision(query, revMin, revMax, callback);\n  },\n\n  /**\n   * loads the event stream\n   * @param {Object || String} query    the query object\n   * @param {Number}           revMin   revision start point [optional]\n   * @param {Number}           revMax   revision end point (hint: -1 = to end) [optional]\n   * @param {Function}         callback the function that will be called when this action has finished\n   *                                    `function(err, eventstream){}`\n   */\n  getEventStream: function (query, revMin, revMax, callback) {\n    if (typeof revMin === 'function') {\n      callback = revMin;\n      revMin = 0;\n      revMax = -1;\n    } else if (typeof revMax === 'function') {\n      callback = revMax;\n      revMax = -1;\n    }\n\n    if (typeof query === 'string') {\n      query = { aggregateId: query };\n    }\n\n    if (!query.aggregateId) {\n      var err = new Error('An aggregateId should be passed!');\n      debug(err);\n      if (callback) callback(err);\n      return;\n    }\n\n    var self = this;\n\n    this.getEventsByRevision(query, revMin, revMax, function(err, evts) {\n      if (err) {\n        return callback(err);\n      }\n      callback(null, new EventStream(self, query, evts));\n    });\n  },\n\n  /**\n   * loads the next snapshot back from given max revision\n   * @param {Object || String} query    the query object\n   * @param {Number}           revMax   revision end point (hint: -1 = to end) [optional]\n   * @param {Function}         callback the function that will be called when this action has finished\n   *                                    `function(err, snapshot, eventstream){}`\n   */\n  getFromSnapshot: function (query, revMax, callback) {\n    if (typeof revMax === 'function') {\n      callback = revMax;\n      revMax = -1;\n    }\n\n    if (typeof query === 'string') {\n      query = { aggregateId: query };\n    }\n\n    if (!query.aggregateId) {\n      var err = new Error('An aggregateId should be passed!');\n      debug(err);\n      if (callback) callback(err);\n      return;\n    }\n\n    var self = this;\n\n    async.waterfall([\n\n      function getSnapshot(callback) {\n        self.store.getSnapshot(query, revMax, callback);\n      },\n\n      function getEventStream(snap, callback) {\n        var rev = 0;\n\n        if (snap && (snap.revision !== undefined && snap.revision !== null)) {\n          rev = snap.revision + 1;\n        }\n\n        self.getEventStream(query, rev, revMax, function(err, stream) {\n          if (err) {\n            return callback(err);\n          }\n\n          if (rev > 0 && stream.lastRevision == -1) {\n            stream.lastRevision = snap.revision;\n          }\n\n          callback(null, snap, stream);\n        });\n      }],\n\n      callback\n    );\n  },\n\n  /**\n   * stores a new snapshot\n   * @param {Object}   obj      the snapshot data\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  createSnapshot: function(obj, callback) {\n    if (obj.streamId && !obj.aggregateId) {\n      obj.aggregateId = obj.streamId;\n    }\n\n    if (!obj.aggregateId) {\n      var err = new Error('An aggregateId should be passed!');\n      debug(err);\n      if (callback) callback(err);\n      return;\n    }\n\n    obj.streamId = obj.aggregateId;\n\n    var self = this;\n\n    async.waterfall([\n        function getNewIdFromStorage(callback) {\n          self.getNewId(callback);\n        },\n        function commit(id, callback) {\n          try {\n            var snap = new Snapshot(id, obj);\n            snap.commitStamp = new Date();\n          } catch (err) {\n            return callback(err);\n          }\n\n          self.store.addSnapshot(snap, function(error) {\n            if (self.options.maxSnapshotsCount) {\n              self.store.cleanSnapshots(_.pick(obj, 'aggregateId', 'aggregate', 'context'), callback);\n            } else {\n              callback(error);\n            }\n          });\n        }],\n      callback\n    );\n  },\n\n  /**\n   * commits all uncommittedEvents in the eventstream\n   * @param eventstream the eventstream that should be saved (hint: directly use the commit function on eventstream)\n   * @param {Function}  callback the function that will be called when this action has finished\n   *                             `function(err, eventstream){}` (hint: eventstream.eventsToDispatch)\n   */\n  commit: function(eventstream, callback) {\n\n    var self = this;\n\n    async.waterfall([\n\n      function getNewCommitId(callback) {\n        self.getNewId(callback);\n      },\n\n      function commitEvents(id, callback) {\n        // start committing.\n        var event,\n          currentRevision = eventstream.currentRevision(),\n          uncommittedEvents = [].concat(eventstream.uncommittedEvents);\n        eventstream.uncommittedEvents = [];\n        for (var i = 0, len = uncommittedEvents.length; i < len; i++) {\n          event = uncommittedEvents[i];\n          event.id = id + i.toString();\n          event.commitId = id;\n          event.commitSequence = i;\n          event.restInCommitStream = len - 1 - i;\n          event.commitStamp = new Date();\n          currentRevision++;\n          event.streamRevision = currentRevision;\n\n          event.applyMappings();\n        }\n\n        self.store.addEvents(uncommittedEvents, function(err) {\n          if (err) {\n            // add uncommitted events back to eventstream\n            eventstream.uncommittedEvents = uncommittedEvents.concat(eventstream.uncommittedEvents);\n            return callback(err);\n          }\n\n          if (self.publisher && self.dispatcher) {\n            // push to undispatchedQueue\n            self.dispatcher.addUndispatchedEvents(uncommittedEvents);\n          } else {\n            eventstream.eventsToDispatch = [].concat(uncommittedEvents);\n          }\n\n          // move uncommitted events to events\n          eventstream.events = eventstream.events.concat(uncommittedEvents);\n          eventstream.currentRevision();\n\n          callback(null, eventstream);\n        });\n      }],\n\n      callback\n    );\n  },\n\n  /**\n   * loads all undispatched events\n   * @param {Object || String} query    the query object [optional]\n   * @param {Function}         callback the function that will be called when this action has finished\n   *                                    `function(err, events){}`\n   */\n  getUndispatchedEvents: function (query, callback) {\n    if (!callback) {\n      callback = query;\n      query = null;\n    }\n\n    if (typeof query === 'string') {\n      query = { aggregateId: query };\n    }\n\n    this.store.getUndispatchedEvents(query, callback);\n  },\n\n  /**\n   * loads the last event\n   * @param {Object || String} query    the query object [optional]\n   * @param {Function}         callback the function that will be called when this action has finished\n   *                                    `function(err, event){}`\n   */\n  getLastEvent: function (query, callback) {\n    if (!callback) {\n      callback = query;\n      query = null;\n    }\n\n    if (typeof query === 'string') {\n      query = { aggregateId: query };\n    }\n\n    this.store.getLastEvent(query, callback);\n  },\n\n  /**\n   * loads the last event in a stream\n   * @param {Object || String} query    the query object [optional]\n   * @param {Function}         callback the function that will be called when this action has finished\n   *                                    `function(err, eventstream){}`\n   */\n  getLastEventAsStream: function (query, callback) {\n    if (!callback) {\n      callback = query;\n      query = null;\n    }\n\n    if (typeof query === 'string') {\n      query = { aggregateId: query };\n    }\n\n    var self = this;\n\n    this.store.getLastEvent(query, function (err, evt) {\n      if (err) return callback(err);\n\n      callback(null, new EventStream(self, query, evt ? [evt] : []));\n    });\n  },\n\n  /**\n   * Sets the given event to dispatched.\n   * @param {Object || String} evtOrId  the event object or its id\n   * @param {Function}         callback the function that will be called when this action has finished [optional]\n   */\n  setEventToDispatched: function (evtOrId, callback) {\n    if (typeof evtOrId === 'object') {\n      evtOrId = evtOrId.id;\n    }\n    this.store.setEventToDispatched(evtOrId, callback);\n  },\n\n  /**\n   * loads a new id from store\n   * @param {Function} callback the function that will be called when this action has finished\n   */\n  getNewId: function (callback) {\n    this.store.getNewId(callback);\n  }\n\n});\n\nmodule.exports = Eventstore;\n","/home/travis/build/npmtest/node-npmtest-eventstore/node_modules/eventstore/lib/eventDispatcher.js":"'use strict';\n\nvar debug = require('debug')('eventstore:eventdispatcher');\n\n/**\n * Eventstore constructor\n * @param {Object} options The options.\n * @param publisher the publisher that should be injected\n * @param store the store that should be injected\n * @constructor\n */\nfunction EventDispatcher(publisher, store) {\n  this.publisher = publisher;\n  this.store = store;\n  this.undispatchedEventsQueue = [];\n}\n\n/**\n * Triggers to publish all events in undispatchedEventsQueue.\n */\nfunction trigger (dispatcher) {\n  var queue = dispatcher.undispatchedEventsQueue || []\n  var event;\n\n  // if the last loop is still in progress leave this loop\n  if (dispatcher.isRunning) return;\n\n  dispatcher.isRunning = true;\n\n  (function next (e) {\n\n    // dipatch one event in queue and call the _next_ callback, which\n    // will call _process_ for the next undispatched event in queue.\n    function process (event, nxt) {\n\n      // Publish it now...\n      debug('publish event...');\n      dispatcher.publisher(event.payload, function(err) {\n        if (err) {\n          return debug(err);\n        }\n        // ...and set the published event to dispatched.\n        debug('set event to dispatched...');\n        dispatcher.store.setEventToDispatched(event, function(err) {\n          if (err) {\n            debug(err);\n          } else {\n            debug('event set to dispatched');\n          }\n        });\n      });\n\n      nxt();\n    }\n\n    // serial process all events in queue\n    if (!e && queue.length) {\n      process(queue.shift(), next)\n    } else {\n      debug(e);\n    }\n  })();\n\n  dispatcher.isRunning = false;\n}\n\nEventDispatcher.prototype = {\n\n  /**\n   * Queues the passed in events for dispatching.\n   * @param events\n   */\n  addUndispatchedEvents: function(events) {\n    var self = this;\n    events.forEach(function(event) {\n      self.undispatchedEventsQueue.push(event);\n    });\n    trigger(this);\n  },\n\n  /**\n   * Starts the instance to publish all undispatched events.\n   * @param callback the function that will be called when this action has finished\n   */\n  start: function(callback) {\n\n    if (typeof this.publisher !== 'function') {\n      var pubErrMsg = 'publisher not injected!';\n      debug(pubErrMsg);\n      if (callback) callback(new Error(pubErrMsg));\n      return;\n    }\n\n    if (!this.store || typeof this.store.getUndispatchedEvents !== 'function'\n                    || typeof this.store.setEventToDispatched !== 'function') {\n      var storeErrMsg = 'store not injected!';\n      debug(storeErrMsg);\n      if (callback) callback(new Error(storeErrMsg))\n      return;\n    }\n\n    var self = this;\n\n    // Get all undispatched events from store and queue them\n    // before all other events passed in by the addUndispatchedEvents function.\n    this.store.getUndispatchedEvents(function(err, events) {\n\n      if (err) {\n        debug(err);\n        if (callback) callback(err);\n        return;\n      }\n\n      var triggered = false;\n      if (events) {\n        for (var i = 0, len = events.length; i < len; i++) {\n          self.undispatchedEventsQueue.push(events[i]);\n          // If there are a lot of events then we can hit issues with the call stack size when processing in one go\n          triggered = false;\n          if (i % 1000 === 0){\n            triggered = true;\n            trigger(self);\n          }\n        }\n      }\n\n      if (!triggered) {\n        trigger(self);\n      }\n\n      if (callback) callback(null);\n    });\n  }\n};\n\nmodule.exports = EventDispatcher;\n","/home/travis/build/npmtest/node-npmtest-eventstore/node_modules/eventstore/lib/eventStream.js":"'use strict';\n\nvar debug = require('debug')('eventstore:eventstream'),\n  _ = require('lodash'),\n  Event = require('./event');\n\n/**\n * EventStream constructor\n * The eventstream is one of the main objects to interagate with the eventstore.\n * @param {Object} eventstore the eventstore that should be injected\n * @param {Object} query the query object\n * @param {Array} events the events (from store)\n * @constructor\n */\nfunction EventStream (eventstore, query, events) {\n  if (!eventstore) {\n    var errESMsg = 'eventstore not injected!';\n    debug(errESMsg);\n    throw new Error(errESMsg);\n  }\n\n  if (typeof eventstore.commit !== 'function') {\n    var errESfnMsg = 'eventstore.commit not injected!';\n    debug(errESfnMsg);\n    throw new Error(errESfnMsg);\n  }\n\n  if (!query) {\n    var errQryMsg = 'query not injected!';\n    debug(errQryMsg);\n    throw new Error(errQryMsg);\n  }\n\n  if (!query.aggregateId) {\n    var errAggIdMsg = 'query.aggregateId not injected!';\n    debug(errAggIdMsg);\n    throw new Error(errAggIdMsg);\n  }\n\n  if (events) {\n    if (!_.isArray(events)) {\n      var errEvtsArrMsg = 'events should be an array!';\n      debug(errEvtsArrMsg);\n      throw new Error(errEvtsArrMsg);\n    }\n    \n    for (var i = 0, len = events.length; i < len; i++) {\n      var evt = events[i];\n      if (evt.streamRevision === undefined || evt.streamRevision === null) {\n        var errEvtMsg = 'The events passed should all have a streamRevision!';\n        debug(errEvtMsg);\n        throw new Error(errEvtMsg);\n      }\n    }\n  }\n  \n  this.eventstore = eventstore;\n  this.streamId = query.aggregateId;\n  this.aggregateId = query.aggregateId;\n  this.aggregate = query.aggregate;\n  this.context = query.context;\n  this.events = events || [];\n  this.uncommittedEvents = [];\n  this.lastRevision = -1;\n  \n  this.events = _.sortBy(this.events, 'streamRevision');\n\n  // to update lastRevision...\n  this.currentRevision();\n}\n\nEventStream.prototype = {\n\n  /**\n   * This helper function calculates and returns the current stream revision.\n   * @returns {Number} lastRevision\n   */\n  currentRevision: function() {\n    for (var i = 0, len = this.events.length; i < len; i++) {\n      if (this.events[i].streamRevision > this.lastRevision) {\n        this.lastRevision = this.events[i].streamRevision;\n      }\n    }\n    \n    return this.lastRevision;\n  },\n\n  /**\n   * adds an event to the uncommittedEvents array\n   * @param {Object} event\n   */\n  addEvent: function(event) {\n    new Event(this, event, this.eventstore.eventMappings);\n  },\n\n  /**\n   * adds an array of events to the uncommittedEvents array\n   * @param {Array} events\n   */\n  addEvents: function(events) {\n    if (!_.isArray(events)) {\n      var errEvtsArrMsg = 'events should be an array!';\n      debug(errEvtsArrMsg);\n      throw new Error(errEvtsArrMsg);\n    }\n    var self = this;\n    _.each(events, function(evt) {\n      self.addEvent(evt);\n    });\n  },\n  \n  /**\n   * commits all uncommittedEvents\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  commit: function(callback) {\n    this.eventstore.commit(this, callback);\n  }\n};\n\nmodule.exports = EventStream;\n","/home/travis/build/npmtest/node-npmtest-eventstore/node_modules/eventstore/lib/event.js":"'use strict';\n\nvar debug = require('debug')('eventstore:event'),\n  dotty = require('dotty'),\n  _ = require('lodash');\n\n/**\n * Event constructor\n * @param {EventStream} eventstream the corresponding event stream object\n * @param {Object}      event       the event object\n * @constructor\n */\nfunction Event (eventstream, event, eventMappings) {\n  if (!eventstream) {\n    var errStreamMsg = 'eventstream not injected!';\n    debug(errStreamMsg);\n    throw new Error(errStreamMsg);\n  }\n  \n  if (!event) {\n    var errEvtMsg = 'event not injected!';\n    debug(errEvtMsg);\n    throw new Error(errEvtMsg);\n  }\n\n  if (!eventstream.aggregateId) {\n    var errAggIdMsg = 'eventstream.aggregateId not injected!';\n    debug(errAggIdMsg);\n    throw new Error(errAggIdMsg);\n  }\n\n  if (!_.isArray(eventstream.uncommittedEvents)) {\n    var errAggIdMsg = 'eventstream.uncommittedEvents not injected!';\n    debug(errAggIdMsg);\n    throw new Error(errAggIdMsg);\n  }\n\n  eventMappings = eventMappings || {};\n\n  this.streamId = eventstream.aggregateId;\n  this.aggregateId = eventstream.aggregateId;\n  this.aggregate = eventstream.aggregate;\n  this.context = eventstream.context;\n  this.streamRevision = null;\n  this.commitId = null;\n  this.commitSequence = null;\n  this.commitStamp = null;\n  this.payload = event || null;\n\n  this.applyMappings = function applyMappings() {\n    _.keys(eventMappings).forEach(function (key) {\n      if (this[key] !== undefined && this[key] !== null) {\n        dotty.put(this.payload, eventMappings[key], this[key]);\n      }\n    }.bind(this));\n  };\n\n  eventstream.uncommittedEvents.push(this);\n}\n\nmodule.exports = Event;\n","/home/travis/build/npmtest/node-npmtest-eventstore/node_modules/eventstore/lib/snapshot.js":"'use strict';\n\nvar debug = require('debug')('eventstore:snapshot');\n\n/**\n * Snapshot constructor\n * The snapshot object will be persisted to the store.\n * @param {String} id  the id of the snapshot\n * @param {Object} obj the snapshot object infos\n * @constructor\n */\nfunction Snapshot (id, obj) {\n  if (!id) {\n    var errIdMsg = 'id not injected!';\n    debug(errIdMsg);\n    throw new Error(errIdMsg);\n  }\n  \n  if (!obj) {\n    var errObjMsg = 'object not injected!';\n    debug(errObjMsg);\n    throw new Error(errObjMsg);\n  }\n\n  if (!obj.aggregateId) {\n    var errAggIdMsg = 'object.aggregateId not injected!';\n    debug(errAggIdMsg);\n    throw new Error(errAggIdMsg);\n  }\n\n  if (!obj.data) {\n    var errDataMsg = 'object.data not injected!';\n    debug(errDataMsg);\n    throw new Error(errDataMsg);\n  }\n\n  this.id = id;\n  this.streamId = obj.aggregateId;\n  this.aggregateId = obj.aggregateId;\n  this.aggregate = obj.aggregate || null;\n  this.context = obj.context || null;\n  this.commitStamp = null;\n  this.revision = obj.revision;\n  this.version = obj.version;\n  this.data = obj.data;\n}\n\nmodule.exports = Snapshot;\n","/home/travis/build/npmtest/node-npmtest-eventstore/node_modules/eventstore/lib/base.js":"'use strict';\n\nvar util = require('util'),\n  EventEmitter = require('events').EventEmitter,\n  prequire = require('parent-require'),\n  _ = require('lodash'),\n  uuid = require('uuid').v4;\n\n/**\n * Store constructor\n * @param {Object} options The options can have information like host, port, etc. [optional]\n */\nfunction Store(options) {\n  options = options || {};\n\n  EventEmitter.call(this);\n}\n\nutil.inherits(Store, EventEmitter);\n\nfunction implementError (callback) {\n  var err = new Error('Please implement this function!');\n  if (callback) callback(err);\n  throw err;\n}\n\nfunction silentWarning(callback) {\n  console.warn('Snapshot cleaning is not implemented for this kind of store');\n  callback();\n}\n\n_.extend(Store.prototype, {\n\n  /**\n   * Initiate communication with the queue.\n   * @param  {Function} callback The function, that will be called when the this action is completed. [optional]\n   *                             `function(err, queue){}`\n   */\n  connect: implementError,\n\n  /**\n   * Terminate communication with the queue.\n   * @param  {Function} callback The function, that will be called when the this action is completed. [optional]\n   *                             `function(err){}`\n   */\n  disconnect: implementError,\n\n  /**\n   * Use this function to obtain a new id.\n   * @param  {Function} callback The function, that will be called when the this action is completed.\n   *                             `function(err, id){}` id is of type String.\n   */\n  getNewId: function (callback) {\n    var id = uuid().toString();\n    if (callback) callback(null, id);\n  },\n\n  /**\n   * loads the events\n   * @param {Object}   query    the query object\n   * @param {Number}   skip     how many events should be skipped?\n   * @param {Number}   limit    how many events do you want in the result?\n   * @param {Function} callback the function that will be called when this action has finished\n   *                            `function(err, events){}`\n   */\n  getEvents: function (query, skip, limit, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * loads all the events since passed commitStamp\n   * @param {Date}     commitStamp the date object\n   * @param {Number}   skip        how many events should be skipped? [optional]\n   * @param {Number}   limit       how many events do you want in the result? [optional]\n   * @param {Function} callback    the function that will be called when this action has finished\n   *                               `function(err, events){}`\n   */\n  getEventsSince: function (commitStamp, skip, limit, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * loads the events\n   * @param {Object}   query    the query object\n   * @param {Number}   revMin   revision start point\n   * @param {Number}   revMax   revision end point (hint: -1 = to end)\n   * @param {Function} callback the function that will be called when this action has finished\n   *                            `function(err, events){}`\n   */\n  getEventsByRevision: function (query, revMin, revMax, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * loads the next snapshot back from given max revision\n   * @param {Object}   query    the query object\n   * @param {Number}   revMax   revision end point (hint: -1 = to end)\n   * @param {Function} callback the function that will be called when this action has finished\n   *                            `function(err, snapshot){}`\n   */\n  getSnapshot: function (query, revMax, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * stores a new snapshot\n   * @param {Object}   snap     the snapshot data\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  addSnapshot: function(snap, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * stores a new snapshot\n   * @param {Object}   query    the query object\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  cleanSnapshots: function(query, callback) {\n    silentWarning(callback);\n  },\n\n  /**\n   * stores the passed events\n   * @param {Array}    evts     the events\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  addEvents: function (evts, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * loads the last event\n   * @param {Object}   query    the query object [optional]\n   * @param {Function} callback the function that will be called when this action has finished\n   *                            `function(err, event){}`\n   */\n  getLastEvent: function (query, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * loads all undispatched events\n   * @param {Object}   query    the query object [optional]\n   * @param {Function} callback the function that will be called when this action has finished\n   *                            `function(err, events){}`\n   */\n  getUndispatchedEvents: function (query, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * Sets the given event to dispatched.\n   * @param {String}   id       the event id\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  setEventToDispatched: function (id, callback) {\n    implementError(callback);\n  },\n\n  /**\n   * NEVER USE THIS FUNCTION!!! ONLY FOR TESTS!\n   * clears the complete store...\n   * @param {Function} callback the function that will be called when this action has finished [optional]\n   */\n  clear: function (callback) {\n    implementError(callback);\n  }\n});\n\nStore.use = function (toRequire) {\n  var required;\n  try {\n    required = require(toRequire);\n  } catch (e) {\n    // workaround when `npm link`'ed for development\n    required = prequire(toRequire);\n  }\n  return required;\n};\n\nmodule.exports = Store;\n"}